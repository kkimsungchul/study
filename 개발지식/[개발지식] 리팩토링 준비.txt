# 개발지식 -  리팩토링 준비

	1. 테스트 작성: 코드 리팩토링을 시작하기 전에 테스트 스위트를 작성하는 것이 중요합니다. 
		테스트가 있으면 리팩토링 후 코드의 동작 여부를 확인할 수 있으며, 버그를 빠르게 발견할 수 있습니다.

	2. 리팩토링 계획: 리팩토링을 하기 전에 어떤 부분을 개선할지 계획을 세우는 것이 좋습니다. 
		리팩토링에 대한 명확한 목표를 설정하고, 어떤 방식으로 코드를 변경할지 고려합니다.

	3. 작은 단계로 진행: 대규모의 리팩토링은 복잡성을 증가시키고 버그를 발생시킬 수 있으므로, 작은 단계로 나누어 진행하는 것이 좋습니다. 
		작은 단계로 하나씩 개선하여 테스트를 실행하면서 안정성을 유지할 수 있습니다.

	4. 중복 코드 제거: 중복 코드는 유지보수를 어렵게 만들고 버그를 발생시킬 수 있으므로, 리팩토링 과정에서 중복 코드를 제거하는 것이 중요합니다.

	5. 네이밍과 가독성 개선: 변수, 함수, 클래스의 이름을 명확하고 의미 있는 이름으로 변경하여 코드의 가독성을 높이는 것이 좋습니다.

	6. 코드 분리: 너무 긴 함수를 작은 함수로 분리하거나, 한 함수에 너무 많은 책임이 있는 경우 적절하게 코드를 분리합니다.

	7. 코드 컨벤션 준수: 코드 컨벤션을 따르는 것은 가독성을 높이고 팀원들과의 협업을 용이하게 합니다.

	8. 리팩토링 후 테스트 실행: 리팩토링을 완료한 후에는 테스트 스위트를 실행하여 코드 변경으로 인한 영향을 확인합니다.

	9. 버전 관리: 리팩토링을 할 때는 버전 관리 시스템을 사용하여 변경 사항을 기록하는 것이 좋습니다. 
		이렇게 하면 문제가 발생했을 때 이전 상태로 롤백할 수 있습니다.

	10. 코드 리뷰: 리팩토링을 수행한 코드를 동료들과 코드 리뷰를 진행하는 것이 좋습니다. 
		다른 시각에서의 피드백을 받을 수 있고, 더 나은 방향을 찾을 수 있습니다.

