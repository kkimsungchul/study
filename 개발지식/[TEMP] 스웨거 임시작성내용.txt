

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import com.google.common.base.Predicates;


import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.AuthorizationCodeGrantBuilder;
import springfox.documentation.builders.OAuthBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.AuthorizationScope;
import springfox.documentation.service.Contact;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.Tag;
import springfox.documentation.service.TokenEndpoint;
import springfox.documentation.service.TokenRequestEndpoint;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger.web.SecurityConfiguration;
import springfox.documentation.swagger.web.SecurityConfigurationBuilder;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig
{
    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Value("${swagger.keycloak.auth-server-url}")
    private String keycloakAuthRootUrl;

    @Value("${swagger.keycloak.token-path}")
    private String dSpaceClientTokenPath;

    @Value("${swagger.keycloak.auth-path}")
    private String dSpaceClientAuthPath;

    @Value("${swagger.keycloak.realm}")
    private String dSpaceRealmName;

    @Value("${swagger.keycloak.client-id}")
    private String dSpacePortalClientId;

    @Value("${swagger.keycloak.client-secret}")
    private String dSpacePortalClientSecret;

    @Value("${swagger.was.addressList}")
    private List<String> wasAddressList;

    @Autowired
    private EnvUtil envUtil;

    
    
    
    @Bean
    public Docket api() {
//        return new Docket(DocumentationType.SWAGGER_2)
//                .apiInfo(apiEndPointsInfo())
//                .pathMapping("/")
//                .forCodeGeneration(true)
//                .genericModelSubstitutes(ResponseEntity.class)
//                .ignoredParameterTypes(java.sql.Date.class)
//                .directModelSubstitute(java.time.LocalDate.class, java.sql.Date.class)
//                .directModelSubstitute(java.time.ZonedDateTime.class, Date.class)
//                .directModelSubstitute(java.time.LocalDateTime.class, Date.class)
//                .securityContexts(Lists.newArrayList(securityContext()))
//                .securitySchemes(Lists.newArrayList(new ApiKey("JWT", "Authorization", "header")))
//                .useDefaultResponseMessages(false);

//        Set<String> protocols = new HashSet<String>();
//        protocols.add("http");

        String hostStr = "dspace.kt.co.kr/api";
        String serverHostName = null;
        try
        {
            serverHostName = envUtil.getHostname();
            String portStr = "8080";    //envUtil.getPort();
            logger.debug("SwaggerConfig api() - Tomcat WAS Server HostName="+serverHostName+", Port="+portStr);

        }catch(UnknownHostException e)
        {
            logger.error("SwaggerConfig api ERROR: ", e);
        }

//        List<String> serverIpList = new ArrayList<String>();
//        serverIpList.add("10.217.66.26");    //TB Portal WAS1
//        serverIpList.add("10.217.66.103");   //TB Portal WAS2
//        serverIpList.add("10.217.66.22");    //PROD Portal WAS1
//        serverIpList.add("10.217.66.36");    //PROD Portal WAS2

        // 로컬에서 테스트시
        if(!wasAddressList.contains(serverHostName))
        {
            hostStr = "localhost:8000";
        }
        // TB 혹은 PROD에서 실행시
        else
        {
            if("https://tbdspace.kt.co.kr/auth".equals(keycloakAuthRootUrl))
            {
                hostStr = "tbdspace.kt.co.kr/api";
            }else if("https://dspace.kt.co.kr/auth".equals(keycloakAuthRootUrl))
            {
                // RM 상용계 도메인을 통한 Swagger Rest API 접근
                hostStr = "dspace.kt.co.kr/api";
            }
        }


        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiEndPointsInfo())
                .tags(
                          new Tag("MsgInfoController", "Message Manage Controller")
                         ,new Tag("ProjectController", "Project Manage Controller")
                         ,new Tag("DSpaceUserController", "D-Space User Controller")
                         ,new Tag("JenkinsController", "D-Space CI Jenkins Controller")
                         ,new Tag("RsaKeyController", "RSA Key Controller")
                         ,new Tag("GuideController", "Guide MD Manage Controller")
                         ,new Tag("MigrationController", "Migration Controller")
                         ,new Tag("CategoryController", "Category Controller")
                         ,new Tag("RoleController", "Role Controller")
                         ,new Tag("SmsController", "SMS Controller")
                         ,new Tag("MemberController", "Member Controller")
                         ,new Tag("MyPageController", "MyPage Controller")
                         ,new Tag("DwtFactDailyProjectAggsController", "Daily Project Status Aggregation Controller")
                         ,new Tag("DwtFactDailyUserAggsController", "Daily User Status Aggregation Controller")
                         ,new Tag("AdminUserController", "Admin User Controller")
                         ,new Tag("AdminProjectController", "Admin Project Controller")
                         ,new Tag("NoticeController", "Notice Controller")
                         ,new Tag("SqlController", "SQL Execute Controller")
                     )
                .forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class)
                .ignoredParameterTypes(java.sql.Date.class)
                .directModelSubstitute(java.time.LocalDate.class, java.sql.Date.class)
                .directModelSubstitute(java.time.ZonedDateTime.class, Date.class)
                .directModelSubstitute(java.time.LocalDateTime.class, Date.class)
                .host(hostStr)
//                .protocols(protocols)
//                .globalOperationParameters(swaggerJwtAuthParams())
                .select()
                .apis(Predicates.not(RequestHandlerSelectors.basePackage("org.springframework.boot")))
                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))
                .paths(PathSelectors.regex("/(application|msgInfo|open-api|v2|sso|rsa|guide|test|project|migration|category|role|sms|member|mypage|statistics|admin|notice|system|jenkins).*"))
                .build()
//                .securitySchemes(Arrays.asList(securitySchemeFromImplicitGrant()))
//                .securityContexts(Arrays.asList(securityContextFromImplicitGrant()));
                .securitySchemes(Arrays.asList(securitySchemeFromAuthorizationCodeGrant()))
                .securityContexts(Arrays.asList(securityContextFromAuthorizationCodeGrant()));
    }

//    private List<Parameter> swaggerJwtAuthParams() {
//        Map<String, Object> claimsMap = new HashMap<String, Object>();
//        claimsMap.put("USER_ID", "SWAGGER");
//        claimsMap.put("UUID", "");
//
//        String swaggerJwtTokenId = jwtTokenProvider.createToken("SWAGGER", claimsMap);
//
//        Parameter param = new ParameterBuilder().name("Authorization").modelRef(new ModelRef("String")).parameterType("header").defaultValue("Bearer " + swaggerJwtTokenId).description("JWT for Swagger").required(true).build();
//
//        List<Parameter> parameterList = new ArrayList<Parameter>();
//        parameterList.add(param);
//
//        return parameterList;
//    }

    private ApiInfo apiEndPointsInfo() {
        return new ApiInfoBuilder().title("D-Space Portal Rest Api")
                .description("This document is a description of the D-Space Portal Rest Api")
                .contact(new Contact("dspace@kt.com", "", ""))
                .license("D-Space Portal 1.0")
                .version("1.0")
                .build();
    }

    /********************************************** Keycloak Realm Implicit Mode Start *****************************************************/
    /*
    private SecurityScheme securitySchemeFromImplicitGrant()
    {
        String dSpaceAuthUrl = this.keycloakAuthRootUrl + this.dSpaceClientAuthPath;
        LoginEndpoint loginEndPoint = new LoginEndpointBuilder().url(dSpaceAuthUrl).build();
        GrantType grantType = new ImplicitGrant(loginEndPoint,"acces_token");// access_token

        return new OAuthBuilder()
            .name("oauth2")
            .scopes(Arrays.asList(scopesFromImplicitGrant()))
            .grantTypes(Arrays.asList(grantType))
            .build();
    }

    private SecurityContext securityContextFromImplicitGrant()
    {
        return SecurityContext.builder()
                .securityReferences(Arrays.asList(new SecurityReference("oauth2", scopesFromImplicitGrant())))
//                .forPaths(PathSelectors.regex("/api.*"))
//                .forPaths(PathSelectors.any())
                .forPaths(Predicates.alwaysTrue())
                .build();
    }

    private AuthorizationScope[] scopesFromImplicitGrant()
    {
        AuthorizationScope[] authorizationScopeArray = new AuthorizationScope[2];
        authorizationScopeArray[0] = new AuthorizationScope("openid", "openid");
        authorizationScopeArray[1] = new AuthorizationScope("profile", "profile");
        return authorizationScopeArray;
    }

    @Bean
    public SecurityConfiguration security()
    {
        Map<String, Object> additionalQueryStringParams = new HashMap<String, Object>();
        additionalQueryStringParams.put("nonce", "12345");

        return SecurityConfigurationBuilder.builder()
                .realm(dSpaceRealmName)
                .clientId(dSpacePortalClientId)
                .appName("swagger-ui")
                .additionalQueryStringParams(additionalQueryStringParams)
                .build();
    }
    */
    /********************************************** Keycloak Realm Implicit Mode End *****************************************************/

    /********************************************** Keycloak Realm Authorization Code Mode Start *****************************************************/

    private SecurityScheme securitySchemeFromAuthorizationCodeGrant()
    {
        String dSpaceAuthUrl = this.keycloakAuthRootUrl + this.dSpaceClientAuthPath;
        String dSpaceTokenUrl = this.keycloakAuthRootUrl + this.dSpaceClientTokenPath;

//        GrantType grantType = new ClientCredentialsGrant(dSpaceTokenUrl);
        GrantType grantType = new AuthorizationCodeGrantBuilder()
            .tokenEndpoint(new TokenEndpoint(dSpaceTokenUrl, "swagger-ui"))
            .tokenRequestEndpoint(new TokenRequestEndpoint(dSpaceAuthUrl, dSpacePortalClientId, dSpacePortalClientSecret))
            .build();

        return new OAuthBuilder()
                .name("spring_oauth")
                .grantTypes(Arrays.asList(grantType))
//                .scopes(Arrays.asList(scopesFromAuthorizationCodeGrant()))
                .build();
    }

//    private AuthorizationScope[] scopesFromAuthorizationCodeGrant()
//    {
//        AuthorizationScope[] scopes =
//        {
//            new AuthorizationScope("user", "for CRUD operations"),
//            new AuthorizationScope("read", "for read operations"),
//            new AuthorizationScope("write", "for write operations")
//        };
//
//        return scopes;
//    }

    private SecurityContext securityContextFromAuthorizationCodeGrant()
    {
        return SecurityContext.builder()
            .securityReferences(Arrays.asList(new SecurityReference("spring_oauth", new AuthorizationScope[]{})))
//            .securityReferences(Arrays.asList(new SecurityReference("spring_oauth", scopesFromAuthorizationCodeGrant())))
//            .forPaths(PathSelectors.regex("/api.*"))
            .forPaths(PathSelectors.any())
            .build();
    }

    @Bean
    public SecurityConfiguration security()
    {
        return SecurityConfigurationBuilder.builder()
                .realm(dSpaceRealmName)
                .clientId(dSpacePortalClientId)
                .clientSecret(dSpacePortalClientSecret)
                .scopeSeparator(" ")
//                .useBasicAuthenticationWithAccessCodeGrant(true)
                .build();
    }
    /********************************************** Keycloak Realm Authorization Code Mode End *****************************************************/

//    private SecurityContext securityContext()
//    {
//        return springfox.documentation.spi.service.contexts.SecurityContext.builder().securityReferences(defaultAuth()).forPaths(PathSelectors.any()).build();
//    }
//
//    List<SecurityReference> defaultAuth()
//    {
//        AuthorizationScope authorizationScope = new AuthorizationScope("global", "accessEverything");
//        AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
//        authorizationScopes[0] = authorizationScope;
//
//        return Lists.newArrayList(new SecurityReference("JWT", authorizationScopes));
//    }
}




#############################################################################################################################################################################
swagger:
  keycloak:
    auth-server-url: https://localhost/auth
    realm: dev
    client-id:portalid
    client-secret: f975e4b4-7d80-4329-8385-523a2aac9105
    user-id: d11111
    password: aaaaa2222
    token-path: /realms/protocol/openid-connect/token
    auth-path: /realms/protocol/openid-connect/auth
  was:
    addressList: 127.0.0.1,192.168.0.100

