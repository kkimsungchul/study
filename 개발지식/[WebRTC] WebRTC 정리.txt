# WebRTC(Web Real-Time Communication)

	WebRTC는 웹 브라우저에서 실시간으로 오디오, 비디오 및 데이터를 교환하기 위한 기술입니다. 
	웹RTC는 플러그인 없이 웹 브라우저에서 고화질의 음성 및 영상통화, 파일 공유 등의 기능을 제공합니다.

	P2P(Peer-to-Peer) 기술을 기반으로 작동합니다. 
	따라서 중간 서버를 거치지 않고 브라우저 간의 데이터 교환을 직접 수행합니다.
	이는 빠른 데이터 전송 속도와 보안성을 보장하며, 서버 비용을 절감할 수 있습니다.

	주로 비디오 채팅, 온라인 게임, 원격 교육, 의료 온라인 상담 등 다양한 분야에서 활용됩니다. 
	또한, WebRTC는 오픈 소스 기술로써 다양한 라이브러리와 프레임워크가 제공되어 개발이 용이합니다.

# WebRTC 구성 방법
	아래와 같은 과정을 거쳐 WebRTC를 구성할수 있으며, 브라우저에서 제공하는 WebRTC API를 이해해야 합니다.

	1. 미디어 스트림 처리
		WebRTC를 사용하려면 먼저 미디어 스트림 처리를 위한 API를 사용해야 합니다. 
		브라우저에서 제공하는 getUserMedia API를 사용하여 사용자의 오디오/비디오 스트림을 캡처할 수 있습니다.

	2. 시그널링
		WebRTC 통신을 위해 필요한 시그널링 서비스를 구현해야 합니다. 
		시그널링은 브라우저 간에 세션을 설정하고 연결하는 프로세스를 의미합니다. 
		SDP(Session Description Protocol)를 이용하여 미디어 및 네트워크 설정 정보를 교환합니다. 시그널링을 구현하는 방법은 다양하지만, 대표적으로 WebSocket, SIP(Session Initiation Protocol), XMPP(Extensible Messaging and Presence Protocol) 등의 프로토콜을 사용할 수 있습니다.

	3. NAT와 방화벽 관리
		WebRTC는 P2P 기술을 사용하기 때문에 서로 다른 네트워크 환경에서도 사용이 가능합니다. 
		그러나 NAT(Network Address Translation)와 방화벽 등의 보안 장비로 인해 서로 다른 브라우저 간에 직접적인 통신이 어려울 수 있습니다. 이를 위해 ICE(Interactive Connectivity Establishment) 프로토콜을 사용하여 NAT와 방화벽을 관리하고, STUN(Session Traversal Utilities for NAT) 서버와 TURN(Traversal Using Relay NAT) 서버를 이용하여 네트워크 환경을 대응할 수 있습니다.

	4. 채팅 및 파일 공유 등 기능 추가
		WebRTC를 사용하여 영상 통화를 구현한 후, 채팅, 파일 공유 등의 기능을 추가할 수 있습니다. 
		이를 위해서는 브라우저에서 제공하는 WebSocket API를 이용하여 서버와 클라이언트 간의 양방향 통신을 구현할 수 있습니다.