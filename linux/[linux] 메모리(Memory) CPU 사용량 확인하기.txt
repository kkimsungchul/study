# Linux - 메모리(Memory) CPU 사용량 확인하기

# 사용 이유
	Linux 를 사용하다 보면 사용중인 서비스의 메모리, CPU 사용량등을 확인할 필요가 있음

# 사용 방법
	TOP 명령어 사용

# 파일로 생성
	==========================================================================
	watch -n 1 'top -b -n 1 |grep java >>java_usage.log'
	==========================================================================
	
	위 명령어를 입력하면 1초간격으로 해당 서비스의 사용량이 파일로 생성됨
	-b : 배치모드
	-n : 실행 횟수
	
	grep부분에는 PID를 넣으면 좀더정확하게 할수 있음

# 좀더 짧은 간격으로 실행
	-n 1 을 주게되면 1초마다 실행이 됨
	근데 좀더 짧은 간격은 -n 옵션에서 제공하지 않기에 while을 사용함
	while 문으로 반복해서 찍되. 0.1초의 대기시간을 줌
	==========================================================================
	while true; do top -b -n 1 |grep java >> java_usage.log; sleep 0.1; done
	==========================================================================

# free 로 Memory 사용량 측정하기
	total에서 free를 뺀 나머지가 현재 사용량
	=====================================================================
	[root@localhost ~]# free -m
				  total        used        free      shared  buff/cache   available
	Mem:          15541         293       13272          24        1975       14943
	Swap:          7959           0        7959
	=====================================================================


# mpstat 로 CPU 사용량 측정하기
	mpstat 명령어로 cpu사용량을 확인할 수 있음
	그전에 sysstat 패키지 설치를 해야 함
	=====================================================================
	dnf install sysstat
	=====================================================================
	
	mpstat 명령어 실행
	=====================================================================
	[root@localhost ~]# mpstat
	Linux 4.18.0-553.22.1.el8_10.x86_64 (localhost.localdomain)     2025년 02월 24일        _x86_64_        (4 CPU)

	23시 17분 48초  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
	23시 17분 48초  all    0.09    0.00    0.07    0.00    0.08    0.02    0.00    0.00    0.00   99.73
	=====================================================================

# CPU 사용량만 측정하기

	pidstat 사용해서 측정하려고 함	
	==========================================================================
	dnf install sysstat
	==========================================================================

	측정
	1초간격으로 60초동안 프로세스명이 JAVA인 프로세스를 측정하여 cpu_usage_java.log 파일에 기록
	==========================================================================
	pidstat -C java 1 60 > cpu_usage_java.log
	==========================================================================
	
	1초간격으로 600초동안 pid가 172529인 프로세스를 측정하여 cpu_usage_java.log 파일에 기록
	==========================================================================
	pidstat -p 172529 1 600 > cpu_usage_java.log
	==========================================================================



# TOP에 표시되는 내용 설명
	==========================================================================
	PID		|	USER	| PR | NI | VIRT | RES | SHR | S | %CPU | %MEM |  TIME	| COMMAND
	101069	|	tomcat	| 20 |  0 | 13.7g| 1.1g|39764| S |  0.0 |  7.5 | 1:45.57| java
	==========================================================================

	PID:  프로세스 ID.

	USER : 해당 프로세스를 실행한 사용자 ID.
	
	PR (priority) : ㅍ로세스 우선순위, 숫자가 낮을수록 우선순위가 높음.
	
	NI (Nice value) : 프로세스의 nice 값으로 프로세스가 CPU 시간을 얼마나 우선적으로 사용할수 있는지 결정함.
		값이 낮을 수록 우선순위가 높음. 
		기본 nice 값은 0이며, 음수값은 우선 순위를 높이는데 사용함.
	
	VIRT (Virtual Memory) : 프로세스가 사용하는 가상메모리의 총량으로 실제 사용하는 메모리 양 뿐만 아니라 프로세스가 접근할 수 있는 모든메모리 양.
		이 숫자는 물리적 RAM만 아니라 SWAP 공간까지 포함된 것
	
	RES (Resident Memotry) : 프로세스가 현재 사용하는 물리적 메모리(주메모리)의 양을 나타냄.
		어떤 프로세스가 실제로 사용하는 메모리 양을 알고 싶을 때 유용함
	
	SHR(Shard Memory) : 여러 프로세스간에 공유되는 메모리 양.
		이 메모리는 여러 프로세스가 동시에 접근 가능하며, 프로세스간의 메모리 효율성을 높이는데 기여함
	
	S (state) : 프로세스의 현재 상태를 나타냄
		R : Running (실행중)
		S : Sleeping (슬립상태)
		Z : Zombie (좀비상태, 종료되었으나 부모 프로세스에 의해 수거되지 않은 상태)
		T : Stopped (정지 상태)
	CPU : 프로세스가 전체 CPU 시간의 몇퍼센트를 사용하고 있는지 나타냄, 해당 값은 1초마다 업데이트되며 CPU가 얼마나 부하를 받는지 알수 있음

	MEM : 프로세스가 전체 메모리의 몇 퍼센트를 사용하고 있는지를 나타냄, 이를 통해 시스템에서 메모리 사용 현황을 모니터링 할 수 있음

	TIME : 프로세스가 사용할 수 있는 CPU 시간의 총량.
		CPU에 대한 실제 사용시간 (분, 초)을 보여주며, 이 값이 높을 수록 해당 프로세스가 CPU를 많이 사용했음을 의미함
	
	COMMAND :  실행중인 프로세스의 명령어와 프로세스의 이름을 나타냄, 어떤 프로세스가 현재 실행되고 있는지를 간단 히 알수 있음
