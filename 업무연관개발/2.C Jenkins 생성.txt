[ Jenkins 생성 ]


# 순서
	
	
	1. Insert 목록을 전달 받는다.
	2. 정규식 체크를 진행한다.
		2-1. 최상단 목록들은 Jenkins API 를 호출하여 중복 체크를 진행한다.
		2-2. 하위목록은 하위목록의 같은 폴더나 같은 잡 안에서 중복이 있나 체크한다.
	
	3. 전달받은 목록의 크기만큼 반복문을 돌면서 insert를 한다.
	4. insert 중 해당 항목의 하위폴더에 내용이 존재한다면 임시목록(TempList)에 추가한다.
	5. insert 가 끝난 후에 임시목록(TempList)에 데이터가 존재하는지 확인하고, 존재한다면 다시 1번으로 돌아간다.
	6. 임시목록(TempList)에 데이터가 없다고 하면 로직을 종료한다.


# 테스트 데이터 insert 쿼리
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by  ,division)
	values ('698', 'kscJenkins267', '' , '0' , '91296885','91296885',1);
	
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by  ,division)
	values ('698', 'kscJenkin260', '' , '0' , '91296885','91296885',1);
	
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by  ,division)
	values ('698', 'kscJenkins255', '' , '0' , '91296885','91296885',1);
	
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by , jenkins_job_type ,division)
	values ('698', '', 'kscJenkinsJobTop254' , '0' , '91296885','91296885','',2);
	
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by  ,division)
	values ('698', 'kscJenkins252', '' , '0' , '91296885','91296885',1);
	
	insert into jenkins_mn_job (project_id , jenkins_folder_name, jenkins_job_name , service_status , created_by , last_modified_by  ,division)
	values ('698', 'kscJenkins249', '' , '0' , '91296885','91296885',1);
	





# InsertProjectVO 수정
	해당 VO에서 사용하는 JenkinsVO를 NewInsertProjectVO 로 변경



# 컨트롤러

	기존에 사용하던 InsertProjectVO 를 사용하되, JenkinsVO를 NewInsertProjectVO 로 변경로 변경한 NewInsertProjectVO 를 사용
	현재 포탈에서 프로젝트 등록시 사용하는 json 구조와 똑같이 받아서 사용함
	====================================================================================================
	@ApiOperation(value = "Jenkins 등록",notes = "프로젝트에 포함되어 있는 Jenkins 목록 조회")
	@RequestMapping(value = "/jenkins", method = RequestMethod.POST)
	public void setJenkinsList(@RequestBody  NewInsertProjectVO newInsertProjectVO ) {
		newJenkinsService.doJenkins(newInsertProjectVO);
	}	
	====================================================================================================
# 서비스

	NewInsertProjectVO 를 받아서 job 과 folder 을 구분하여 각각 job과 folder 생성 메소드를 호출하도록 처리
	====================================================================================================
    /**
     * jenkins 폴더, job 생성
     * @param newInsertProjectVo
     * @return boolean
     */
    public boolean doJenkins(NewInsertProjectVO newInsertProjectVo) {
	    boolean isSuccess = false;
		//String loginId = insertProjectVo.getCreatedBy();
	    String loginId = "91296885";
	    long projectId = (long)698;
		NewInsertJenkinsVO jenkins = newInsertProjectVo.getJenkins();
		
		List<NewInsertJenkinsVO> insertJenkinsFolderList = jenkins.getFolders();
		List<NewInsertJenkinsVO> insertJenkinsJobList = jenkins.getJobs();
		
		System.out.println(keyCloakSession.getLoginId());
		
		for(int i=0;i<insertJenkinsFolderList.size();i++) {
			System.out.println(i + " #### insertJenkinsFolderList : " + insertJenkinsFolderList.get(i));
		}
		for(int i=0;i<insertJenkinsJobList.size();i++) {
			System.out.println(i + " #### insertJenkinsJobList : " + insertJenkinsJobList.get(i));
		}
		String uri = jenkinsUrl;
		createJenkinsFolder(insertJenkinsFolderList,uri , projectId, true);
		createJenkinsJob(insertJenkinsJobList,uri , projectId, true);
		
		isSuccess = true;
		return isSuccess;
	}	
	
	
	====================================================================================================
	
	
	folder 생성하는 메소드, 
	상위 폴더를 순차적으로 생성하면서, 폴더 안에 job이 존재할 경우 job 생성 메소드를 호출하도록 수정
	boolean topFlag 변수는 최상단인지 아닌지 구분하기위해 사용하며, 최상단일 경우에만 DB에 저장할 수 있또록 함
	재귀호출하도록 구현하였음
	====================================================================================================
	/**
	 * Jenkins Folder 생성
	 * @param insertJenkinsFolderList folder 목록
	 * @param uri 생성할 경로
	 * @param projectId 포탈 project id
	 * @param topFlag 최상위 구분 여부 true :  최상위 
	 * @return List<NewJenkinsParamVO>
	 */
    public Map<String, String> createJenkinsFolder(List<NewInsertJenkinsVO> insertJenkinsFolderList,String uri , long projectId , boolean topFlag) {
    	String templateJobName ="";
    	String loginId = keyCloakSession.getLoginId();
    	Map<String, String> result = new HashMap<String, String>();
    	
    	if(insertJenkinsFolderList.size()>0) {
    		for(int i=0;i<insertJenkinsFolderList.size();i++) {
    		    //폴더 생성
    			//String uri = jenkinsUrl + "/createItem?name=" + folderName +"&mode=com.cloudbees.hudson.plugins.folder.Folder";
    			String tempUri = uri+"/createItem?name=" + insertJenkinsFolderList.get(i).getJenkinsFolderName() + "&mode=com.cloudbees.hudson.plugins.folder.Folder";
    			System.out.println("### folder create tempUri : " + tempUri);
    			try {
    	            ResponseEntity<String> responseResult = callJenkinsRestApi("POST", tempUri, null);
    	            System.out.println(responseResult.getBody());
    	            if (responseResult.getStatusCode() == HttpStatus.OK) {
    	                LOGGER.info("Jenkins REST API : Folder create success! , HttpStatus.OK");
    	                result.put("status", DbMessageManager.getMessage("I0001", "ko"));
    	                result.put("msg", "");
    	                //최상위일 경우에만 DB에 저장
    	                if(topFlag) {
    	                	insertJenkinsFolderList.get(i).setCreatedBy(loginId);
    	                	insertJenkinsFolderList.get(i).setLastModifiedBy(loginId);
    	                	insertJenkinsFolderList.get(i).setProjectId(projectId);
    	                	newJenkinsMapper.insertJenkins(insertJenkinsFolderList.get(i));	
    	                }
    	            } else {
    	                // ssl 오류에 대해서는 무시한다 (정상으로 처리)
    	                if (responseResult.getStatusCode() == HttpStatus.FOUND) {
    	                	LOGGER.info("Jenkins REST API : Folder create success! , HttpStatus.FOUND");
    	                    result.put("status", DbMessageManager.getMessage("I0001", "ko"));
    	                    result.put("msg", "");
        	                //최상위일 경우에만 DB에 저장
        	                if(topFlag) {
        	                	insertJenkinsFolderList.get(i).setCreatedBy(loginId);
        	                	insertJenkinsFolderList.get(i).setLastModifiedBy(loginId);
        	                	insertJenkinsFolderList.get(i).setProjectId(projectId);
        	                	newJenkinsMapper.insertJenkins(insertJenkinsFolderList.get(i));	
        	                }
    	                } else {
    	                    LOGGER.error("Jenkins REST API is fail, Return code : " + responseResult.getStatusCodeValue());
    	                    throw new ApiException(responseResult.getStatusCode(), "E0015");
    	                }
    	            }

    	        } catch(HttpClientErrorException ce) {
    	            throw HttpErrorExceptionDetail.getApiException(ce, "Jenkins REST API error", uri);
    	        } catch (HttpServerErrorException se) {
    	            throw HttpErrorExceptionDetail.getApiException(se, "Jenkins REST API error", uri);
    	        }
    			
    			if(insertJenkinsFolderList.get(i).getJobs().size()>0) {
    				String createJobUri = uri + "/job/" + insertJenkinsFolderList.get(i).getJenkinsFolderName() +"/";
    				createJenkinsJob(insertJenkinsFolderList.get(i).getJobs() , createJobUri , projectId ,false);
    			}
    			if(insertJenkinsFolderList.get(i).getFolders().size()>0) {
    				String createFolderUri = uri + "/job/" + insertJenkinsFolderList.get(i).getJenkinsFolderName() +"/";
    				createJenkinsFolder(insertJenkinsFolderList.get(i).getFolders() , createFolderUri , projectId , false);
    			}
    			
    			
    		}
    		
    	}
    	
    	return result;
    }	
	
	
	====================================================================================================
	
	job 생성하는 메소드, 
	넘겨반은 job목록대로 순차적으로 jenkins에 생성하도록 작성함
	boolean topFlag 변수는 최상단인지 아닌지 구분하기위해 사용하며, 최상단일 경우에만 DB에 저장할 수 있또록 함
	====================================================================================================
	
	
# VO
	새로 생성하였음, DB구조가 변경되어서 그에 맞도록 수정하였으며, job과 folder을 하나의 vo로 사용함
	====================================================================================================
	package com.kt.dspace.portal.project.jenkins.test;

	import java.util.List;

	import io.swagger.annotations.ApiModel;
	import io.swagger.annotations.ApiModelProperty;

	@ApiModel(value = "NewInsertJenkinsVO", description = "젠킨스 insert VO")
	public class NewInsertJenkinsVO {
		
		/**
		 * Jenkins id
		 */
		@ApiModelProperty(name = "id", value = "Jenkins id", dataType = "String")
		public String id;
		
		/**
		 * 프로젝트 ID
		 */
		@ApiModelProperty(name = "projectId", value = "프로젝트 ID", dataType = "Long")
		private Long projectId;
		/**
		 * Jenkins 폴더명
		 */
		@ApiModelProperty(name = "jenkinsFolderName", value = "Jenkins 폴더명", dataType = "String")
		public String jenkinsFolderName;
		
		/**
		 * Jenkins job 명
		 */
		@ApiModelProperty(name = "jenkinsJobName", value = "Jenkins job 명", dataType = "String")
		public String jenkinsJobName;
		
		/**
		 * jenkins service status
		 */
		@ApiModelProperty(name = "serviceStatus", value = "Jenkins 상태코드", dataType = "Integer")
		private Integer serviceStatus;
		
		/**
		 * Jenkins 등록자
		 */
		@ApiModelProperty(name = "createdBy", value = "Jenkins 등록자", dataType = "String")
		private String createdBy;
		
		/**
		 * Jenkins 등록일시
		 */
		@ApiModelProperty(name = "createdDate", value = "Jenkins 등록일시", dataType = "String")
		private String createdDate;
		/**
		 * Jenkins 수정자
		 */
		@ApiModelProperty(name = "lastModifiedBy", value = "Jenkins 수정자", dataType = "String")
		private String lastModifiedBy;
		
		/**
		 * Jenkins 수정일시
		 */
		@ApiModelProperty(name = "lastModifiedDate", value = "Jenkins 수정일시", dataType = "String")
		private String lastModifiedDate;

		/**
		 * Jenkins job 타입명(FreeStyle or Pipeline or...)
		 */
		@ApiModelProperty(name = "jenkinsJobType", value = "Jenkins Job 타입 코드(10301 - FreeStyle, 10302 - Pipeline)", dataType = "String", example = "10302")
		public String jenkinsJobType;
		
		/**
		 * 구분코드 1: folder, 2: job
		 */
		@ApiModelProperty(name = "division", value = "구분코드 1: folder, 2: job", dataType = "String", example = "10302")
		public int division;
		
		/**
		 * Jenkins deleteFlag 
		 */
		@ApiModelProperty(name = "deleteFlag", value = "Jenkins deleteFlag 값이 존재할경우 삭제 (1)", dataType = "String", example = "Pipeline")
		public String deleteFlag;
		

		@ApiModelProperty(name = "folders", value = "폴더목록", dataType = "List")
		public List<NewInsertJenkinsVO> folders;
		
		@ApiModelProperty(name = "jobs", value = "job목록", dataType = "List")
		public List<NewInsertJenkinsVO> jobs;

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public Long getProjectId() {
			return projectId;
		}

		public void setProjectId(Long projectId) {
			this.projectId = projectId;
		}

		public String getJenkinsFolderName() {
			return jenkinsFolderName;
		}

		public void setJenkinsFolderName(String jenkinsFolderName) {
			this.jenkinsFolderName = jenkinsFolderName;
		}

		public String getJenkinsJobName() {
			return jenkinsJobName;
		}

		public void setJenkinsJobName(String jenkinsJobName) {
			this.jenkinsJobName = jenkinsJobName;
		}

		public Integer getServiceStatus() {
			return serviceStatus;
		}

		public void setServiceStatus(Integer serviceStatus) {
			this.serviceStatus = serviceStatus;
		}

		public String getCreatedBy() {
			return createdBy;
		}

		public void setCreatedBy(String createdBy) {
			this.createdBy = createdBy;
		}

		public String getCreatedDate() {
			return createdDate;
		}

		public void setCreatedDate(String createdDate) {
			this.createdDate = createdDate;
		}

		public String getLastModifiedBy() {
			return lastModifiedBy;
		}

		public void setLastModifiedBy(String lastModifiedBy) {
			this.lastModifiedBy = lastModifiedBy;
		}

		public String getLastModifiedDate() {
			return lastModifiedDate;
		}

		public void setLastModifiedDate(String lastModifiedDate) {
			this.lastModifiedDate = lastModifiedDate;
		}

		public String getJenkinsJobType() {
			return jenkinsJobType;
		}

		public void setJenkinsJobType(String jenkinsJobType) {
			this.jenkinsJobType = jenkinsJobType;
		}

		public int getDivision() {
			return division;
		}

		public void setDivision(int division) {
			this.division = division;
		}

		public String getDeleteFlag() {
			return deleteFlag;
		}

		public void setDeleteFlag(String deleteFlag) {
			this.deleteFlag = deleteFlag;
		}

		public List<NewInsertJenkinsVO> getFolders() {
			return folders;
		}

		public void setFolders(List<NewInsertJenkinsVO> folders) {
			this.folders = folders;
		}

		public List<NewInsertJenkinsVO> getJobs() {
			return jobs;
		}

		public void setJobs(List<NewInsertJenkinsVO> jobs) {
			this.jobs = jobs;
		}

		@Override
		public String toString() {
			return "NewInsertJenkinsVO [id=" + id + ", projectId=" + projectId + ", jenkinsFolderName=" + jenkinsFolderName
					+ ", jenkinsJobName=" + jenkinsJobName + ", serviceStatus=" + serviceStatus + ", createdBy="
					+ createdBy + ", createdDate=" + createdDate + ", lastModifiedBy=" + lastModifiedBy
					+ ", lastModifiedDate=" + lastModifiedDate + ", jenkinsJobType=" + jenkinsJobType + ", division="
					+ division + ", deleteFlag=" + deleteFlag + ", folders=" + folders + ", jobs=" + jobs + "]";
		}

		

	}
		
	
	====================================================================================================
# 맵퍼 (JAVA)

	job과 folder 은 같은 테이블을 사용하고있고, 서로 필드만 다르기에 하나의 메소드로 mapper를 호출하도록 작성
	====================================================================================================
	public Long insertJenkins(NewInsertJenkinsVO vo);
	====================================================================================================
	
# 맵퍼 (XML)

	if로 folder인지 job인지 구분해서 insert 하도록 수정함
	====================================================================================================
    <insert id="insertJenkins" parameterType="NewJenkinsParamVO">
        INSERT INTO jenkins_mn_job 
	
		<if test='jenkinsFolderName!=null and jenkinsFolderName!=""'>
			(project_id , jenkins_folder_name, service_status , created_by , last_modified_by ,division)
			VALUES (#{projectId} , #{jenkinsFolderName} , 0 , #{createdBy} , #{lastModifiedBy}, #{division})
		</if>
		<if test='jenkinsJobName!=null and jenkinsJobName!=""'>
			(project_id , jenkins_job_name , service_status , created_by , last_modified_by , jenkins_job_type ,division)
			VALUES (#{projectId}  , #{jenkinsJobName} ,0 , #{createdBy} , #{lastModifiedBy} , #{jenkinsJobType}  , #{division})
		</if>
    </insert>	
	
	====================================================================================================