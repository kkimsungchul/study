[ Jenkins 생성 중복체크 ]
	프로젝트 생성시에 중복체크 하도록 작성
	
# 순서
	
	1. url이 있는지 확인한다.
	
	2. url 이 있는 경우 중복체크를 하지 않는다
		( 젠킨스는 이름 변경이 불가능하기때문)
	
	3. URL 이 존재하지 않을 경우 아래의 순서대로 처리한다

	4. 최상단일 경우에는 DB와 Jenkins에서 둘다 확인한다.
		job 이든 folder이든 같은 이름 사용은 불가능
		ex) job으로 jenkins001 을 생성햇으면 folder 로 jenkins001 을 생성 할 수 없음
	
	5. 최상단이 아닐경우 해당 폴더 내에 존재하는 job과 folder의 이름들중 중복되는 값이 있는지 체크
	
	


# 컨트롤러
	NewUpdateProjectVO 를 넘겨받아서 거기서 jenkins만 추출해서 보냄.
	현재 중복체크로직도 저렇게 저부분만 빼내서 보내고있음
	====================================================================================================
	@ApiOperation(value = "Jenkins update 중복체크",notes = "프로젝트 수정시 전달되는 insertvo를 그대로 받아서 젠킨스만 중복체크함")
	@RequestMapping(value = "/jenkins/updateValidationCheck", method = RequestMethod.POST)
	public void updateValidationCheck(@RequestBody  NewUpdateProjectVO newUpdateProjectVO ) {
		System.out.println(newJenkinsService.updateJenkinsDBValidationCheck(newUpdateProjectVO.getJenkins()));
	}
	====================================================================================================
	
# 서비스

	중복체크 첫번째 메소드 jenkinsDBValidationCheck
	URL이 없을 경우 최상단의 job 과 folder 를 DB에서 체크하도록 하였음
	DB체크시에는 중복된 이름이 있으면 검출되도록했음, N:M 인데 왜 중복이 안되냐 라고 할수 있는데,
	DB Insert는 Jenkins 에서 Create 했을때 하는거임,
	이미 생성되어 있는 Jenkins를 또 생성하려고 하면 오류가 발생함
	이미 있는 Jenkins를 추가하고 싶을때는 import 를 하는게 맞음
	====================================================================================================
    /**
     * jenkins 최상위 folder , job 의 DB 중복체크 - update 에서 사용
     * @param jenkins
     * @return Map<String, Object>
     */
    public Map<String, Object> updateJenkinsDBValidationCheck(NewUpdateJenkinsVO jenkins) { 
    	
		Map<String, Object> result = new HashMap<String, Object>();
		List<NewUpdateJenkinsVO> updateJenkinsFolderList = jenkins.getFolders();
		List<NewUpdateJenkinsVO> updateJenkinsJobList = jenkins.getJobs();
		String compare="";
		
		for(int i=0;i<updateJenkinsFolderList.size();i++) {
			//최상단 folder DB 목록 중복 체크

			if(newJenkinsMapper.updateValidJenkinsCheck(updateJenkinsFolderList.get(i))!=0 && ("".equals(updateJenkinsFolderList.get(i).url) || updateJenkinsFolderList.get(i).getUrl()==null)) {
				result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
				return result;				
			}
			//folder 정규식 체크
			result = updateJenkinsToolValidationCheck(updateJenkinsFolderList,null);
			if(!result.isEmpty()) {
				return result;
			}
			compare = updateJenkinsFolderList.get(i).getJenkinsFolderName();
			for(int j=0;j<updateJenkinsFolderList.size();j++) {
				if(i!=j) {
					if(updateJenkinsFolderList.get(j).getJenkinsFolderName().equals(compare)) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
						return result;	
					}
				}
			}
		}
		
		for(int i=0;i<updateJenkinsJobList.size();i++) {

			//최상단 job 목록 DB Check 중복 체크
			if(newJenkinsMapper.updateValidJenkinsCheck(updateJenkinsJobList.get(i))!=0  && ("".equals(updateJenkinsJobList.get(i).url) || updateJenkinsJobList.get(i).getUrl()==null)) {
				result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
				return result;		
			}
			
			compare = updateJenkinsJobList.get(i).getJenkinsJobName();
			for(int j=0;j<updateJenkinsJobList.size();j++) {
				if(i!=j) {
					if(updateJenkinsJobList.get(j).getJenkinsJobName().equals(compare)) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
						return result;	
					}
				}
			}
			
		

		}
		// 정규식 체크 및 tool중복 체크
		result = updateJenkinsToolValidationCheck(updateJenkinsJobList,null);
		if(!result.isEmpty()) {
			return result;
		}
		
    	return result;
    }

	====================================================================================================

	
	중복체크 두번째 메소드 updateJenkinsFolderList
	정규식 체크와 tool에 존재하는지 체크하는메소드 
	재귀함수로 이뤄져있어서, 하위의 폴더나 잡이있으면 계속 호출됨
	====================================================================================================
    /**
     * 젠킨스의 folder , job 의 정규식 체크, 재귀함수로 사용중이여서 하위폴더 , 하위job까지 확인 - update 에서 사용
     * @param updateJenkinsFolderList
     * @param uri
     * @return Map<String, Object>
     */
    public Map<String, Object> updateJenkinsToolValidationCheck(List<NewUpdateJenkinsVO> updateJenkinsFolderList,String uri){
		Matcher match;
		Map<String, Object> result = new HashMap<String, Object>();
		String regexJenkins  = "^([A-Za-z0-9ㄱ-힣]{1})[a-zA-Z0-9ㄱ-힣-_(),.\\s]{0,84}$";
		if(uri==null) {
			uri = jenkinsUrl;
		}
		//List<NewUpdateJenkinsVO> updateJenkinsFolderList = updateJenkinsFolderList
		for(int i=0; i<updateJenkinsFolderList.size();i++) {
			if(updateJenkinsFolderList.get(i).getDivision()==1) {
				String folderName = updateJenkinsFolderList.get(i).getJenkinsFolderName();	
				
				//정규식 체크
		        match = Pattern.compile(regexJenkins).matcher(folderName);
		        if(!match.find()) {
				    result.put("msg", DbMessageManager.getMessage("E0125", new Object[]{"Jenkins 폴더명", "특수문자로 시작할 수 없으며 한글,영문대소문자,숫자,특수문자 -_().,","1","85"}, "ko"));
				    return result;  
		        }
		        
		        //수정시의 중복체크는, 기존에 생성한 jenkins와 비교해야 하기때문에 i 는 신규생성목록, j 는 전체목록으로 가져와서 비교함
				for(int j=0;j<updateJenkinsFolderList.size();j++) {
					if(i!=j && updateJenkinsFolderList.get(j).getDivision()==1) {
						if(updateJenkinsFolderList.get(j).getJenkinsFolderName().equals(folderName)) {
							result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
							return result;	
						}
					}
				}
		        
				//URL 이 있을 경우 이미 생성한 jenkins 로 판단
		        if("".equals(updateJenkinsFolderList.get(i).getUrl()) || updateJenkinsFolderList.get(i).getUrl()==null) {
			        if(existFolderOrJob(uri, updateJenkinsFolderList.get(i).getJenkinsFolderName())) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
						return result;	
			        }		        	
		        }
		        //하위폴더 체크
		        if(updateJenkinsFolderList.get(i).getFolders().size()>0) {

		        	result = updateJenkinsToolValidationCheck(updateJenkinsFolderList.get(i).getFolders(),uri+ "/job/" + updateJenkinsFolderList.get(i).getJenkinsFolderName());
		        	
					if(!result.isEmpty()) {
						return result;
					}
		        }
		        //하위 잡 체크
		        if(updateJenkinsFolderList.get(i).getJobs().size()>0) {

		        	result = updateJenkinsToolValidationCheck(updateJenkinsFolderList.get(i).getJobs(),uri+ "/job/" + updateJenkinsFolderList.get(i).getJenkinsFolderName());

					if(!result.isEmpty()) {
						return result;
					}
		        }
				
			}else {
				String jobName = updateJenkinsFolderList.get(i).getJenkinsJobName();
				
				//정규식 체크
				match = Pattern.compile(regexJenkins).matcher(jobName);
				if(!match.find()) {
					result.put("msg", DbMessageManager.getMessage("E0125", new Object[]{"Jenkins job명", "특수문자로 시작할 수 없으며 한글,영문대소문자,숫자,특수문자 -_().,","1","85"}, "ko"));
					return result;  
				}
		        
				for(int j=0;j<updateJenkinsFolderList.size();j++) {
					if(i!=j && updateJenkinsFolderList.get(j).getDivision()==2) {
						if(updateJenkinsFolderList.get(j).getJenkinsJobName().equals(jobName)) {
							result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
							return result;	
						}
					}
				}
				
				//URL 이 있을 경우 이미 생성한 jenkins 로 판단
				if("".equals(updateJenkinsFolderList.get(i).getUrl()) || updateJenkinsFolderList.get(i).getUrl()==null) {
					if(existFolderOrJob(uri, updateJenkinsFolderList.get(i).getJenkinsJobName())) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
						return result;	
					}	
				}
				
				
			}
			
		}

		return result;
    }
    
	
	====================================================================================================

	중복체크 세번째 메소드 existFolderOrJob
	애는 insert꺼 그대로 사용했음, api 호출하는것뿐이라서 굳이 새로 만들필요를 못느낌
	====================================================================================================
    /**
     * Jenkins Folder 또는 Job이 존재하는지 Validation Check
     * @param uri
     * @param name
     * @return boolean
     */
    public boolean existFolderOrJob(String uri,String name) {
        uri = uri +  "/job/" + name + "/api/json";
        LOGGER.info("existFolderOrJob :" +  uri);
        try {
            ResponseEntity<String> responseResult = callJenkinsRestApiForJson("GET", uri, null);

            if(responseResult.getStatusCode() == HttpStatus.OK) {
                LOGGER.info("Jenkins REST API : Get jenkins informatin is found!");
            } else {
                if(responseResult.getStatusCode() == HttpStatus.NOT_FOUND) {
                    LOGGER.info("Jenkins REST API : Get jenkins informatin is not found!");
                    return false;
                } else {
                    LOGGER.error("Jenkins REST API is fail, Return code : " + responseResult.getStatusCodeValue());
                }
            }

        } catch(HttpClientErrorException ce) {
            HttpStatus status = ce.getStatusCode();
            if(status == HttpStatus.NOT_FOUND) {
                LOGGER.info("Jenkins REST API : Get jenkins informatin is not found!");
                return false;
            } else {
                LOGGER.error("Jenkins REST API error: {}", ce.getMessage());
            }
        } catch(HttpServerErrorException se) {
            LOGGER.error("Jenkins REST API error: {}", se.getMessage());
        }
        
        
    	return true;
    }
	
	
	
	====================================================================================================

# VO	
	====================================================================================================
	package com.sumgchuldspace.portal.project.jenkins.test;

	import java.util.List;

	import io.swagger.annotations.ApiModel;
	import io.swagger.annotations.ApiModelProperty;

	@ApiModel(value = "NewUpdateJenkinsVO", description = "젠킨스 Update VO")
	public class NewUpdateJenkinsVO {
		
		/**
		 * Jenkins id
		 */
		@ApiModelProperty(name = "id", value = "Jenkins id", dataType = "String")
		public int id;
		
		/**
		 * 프로젝트 ID
		 */
		@ApiModelProperty(name = "projectId", value = "프로젝트 ID", dataType = "Long")
		private Long projectId;
		/**
		 * Jenkins 폴더명
		 */
		@ApiModelProperty(name = "jenkinsFolderName", value = "Jenkins 폴더명", dataType = "String")
		public String jenkinsFolderName;
		
		/**
		 * Jenkins job 명
		 */
		@ApiModelProperty(name = "jenkinsJobName", value = "Jenkins job 명", dataType = "String")
		public String jenkinsJobName;
		
		/**
		 * jenkins service status
		 */
		@ApiModelProperty(name = "serviceStatus", value = "Jenkins 상태코드", dataType = "Integer")
		private Integer serviceStatus;
		
		/**
		 * Jenkins 등록자
		 */
		@ApiModelProperty(name = "createdBy", value = "Jenkins 등록자", dataType = "String")
		private String createdBy;
		
		/**
		 * Jenkins 등록일시
		 */
		@ApiModelProperty(name = "createdDate", value = "Jenkins 등록일시", dataType = "String")
		private String createdDate;
		/**
		 * Jenkins 수정자
		 */
		@ApiModelProperty(name = "lastModifiedBy", value = "Jenkins 수정자", dataType = "String")
		private String lastModifiedBy;
		
		/**
		 * Jenkins 수정일시
		 */
		@ApiModelProperty(name = "lastModifiedDate", value = "Jenkins 수정일시", dataType = "String")
		private String lastModifiedDate;

		/**
		 * Jenkins job 타입명(FreeStyle or Pipeline or...)
		 */
		@ApiModelProperty(name = "jenkinsJobType", value = "Jenkins Job 타입명(FreeStyle, Pipeline)", dataType = "String", example = "Pipeline")
		public String jenkinsJobType;
		
		/**
		 * Jenkins job 타입명(FreeStyle or Pipeline or...)
		 */
		@ApiModelProperty(name = "jenkinsJobTypeName", value = "Jenkins Job 타입명(FreeStyle, Pipeline)", dataType = "String", example = "Pipeline")
		private String jenkinsJobTypeName;
		/**
		 * 구분코드 1: folder, 2: job
		 */
		@ApiModelProperty(name = "division", value = "구분코드 1: folder, 2: job", dataType = "String", example = "10302")
		public int division;
		/**
		 * Jenkins deleteFlag 
		 */
		@ApiModelProperty(name = "deleteFlag", value = "Jenkins deleteFlag 값이 존재할경우 삭제 (1)", dataType = "String", example = "Pipeline")
		public String deleteFlag;
		
		/**
		 * Jenkins URL , 해당 폴더나 job의 URL
		 */
		@ApiModelProperty(name = "url", value = "jenkins url", dataType = "String")
		public String url;
		

		@ApiModelProperty(name = "folders", value = "폴더목록", dataType = "List")
		public List<NewUpdateJenkinsVO> folders;
		
		@ApiModelProperty(name = "jobs", value = "job목록", dataType = "List")
		public List<NewUpdateJenkinsVO> jobs;

		public int getId() {
			return id;
		}

		public void setId(int id) {
			this.id = id;
		}

		public Long getProjectId() {
			return projectId;
		}

		public void setProjectId(Long projectId) {
			this.projectId = projectId;
		}

		public String getJenkinsFolderName() {
			return jenkinsFolderName;
		}

		public void setJenkinsFolderName(String jenkinsFolderName) {
			this.jenkinsFolderName = jenkinsFolderName;
		}

		public String getJenkinsJobName() {
			return jenkinsJobName;
		}

		public void setJenkinsJobName(String jenkinsJobName) {
			this.jenkinsJobName = jenkinsJobName;
		}

		public Integer getServiceStatus() {
			return serviceStatus;
		}

		public void setServiceStatus(Integer serviceStatus) {
			this.serviceStatus = serviceStatus;
		}

		public String getCreatedBy() {
			return createdBy;
		}

		public void setCreatedBy(String createdBy) {
			this.createdBy = createdBy;
		}

		public String getCreatedDate() {
			return createdDate;
		}

		public void setCreatedDate(String createdDate) {
			this.createdDate = createdDate;
		}

		public String getLastModifiedBy() {
			return lastModifiedBy;
		}

		public void setLastModifiedBy(String lastModifiedBy) {
			this.lastModifiedBy = lastModifiedBy;
		}

		public String getLastModifiedDate() {
			return lastModifiedDate;
		}

		public void setLastModifiedDate(String lastModifiedDate) {
			this.lastModifiedDate = lastModifiedDate;
		}

		public String getJenkinsJobType() {
			return jenkinsJobType;
		}

		public void setJenkinsJobType(String jenkinsJobType) {
			this.jenkinsJobType = jenkinsJobType;
		}

		public String getJenkinsJobTypeName() {
			return jenkinsJobTypeName;
		}

		public void setJenkinsJobTypeName(String jenkinsJobTypeName) {
			this.jenkinsJobTypeName = jenkinsJobTypeName;
		}

		public int getDivision() {
			return division;
		}

		public void setDivision(int division) {
			this.division = division;
		}

		public String getDeleteFlag() {
			return deleteFlag;
		}

		public void setDeleteFlag(String deleteFlag) {
			this.deleteFlag = deleteFlag;
		}

		public String getUrl() {
			return url;
		}

		public void setUrl(String url) {
			this.url = url;
		}

		public List<NewUpdateJenkinsVO> getFolders() {
			return folders;
		}

		public void setFolders(List<NewUpdateJenkinsVO> folders) {
			this.folders = folders;
		}

		public List<NewUpdateJenkinsVO> getJobs() {
			return jobs;
		}

		public void setJobs(List<NewUpdateJenkinsVO> jobs) {
			this.jobs = jobs;
		}

		@Override
		public String toString() {
			return "NewUpdateJenkinsVO [id=" + id + ", projectId=" + projectId + ", jenkinsFolderName=" + jenkinsFolderName
					+ ", jenkinsJobName=" + jenkinsJobName + ", serviceStatus=" + serviceStatus + ", createdBy=" + createdBy
					+ ", createdDate=" + createdDate + ", lastModifiedBy=" + lastModifiedBy + ", lastModifiedDate="
					+ lastModifiedDate + ", jenkinsJobType=" + jenkinsJobType + ", jenkinsJobTypeName=" + jenkinsJobTypeName
					+ ", division=" + division + ", deleteFlag=" + deleteFlag + ", url=" + url + ", folders=" + folders
					+ ", jobs=" + jobs + "]";
		}



		
	}


	====================================================================================================

	
# 맵퍼(java)
	
	====================================================================================================
	public int updateValidJenkinsCheck(NewUpdateJenkinsVO vo);
	====================================================================================================

# 맵퍼(xml)
	====================================================================================================
    <select id="updateValidJenkinsCheck" resultType="Integer" parameterType="NewJenkinsParamVO" >
       select count(*) from jenkins_mn_job
        <if test='jenkinsFolderName!=null and jenkinsFolderName!=""'>
            where jenkins_folder_name = #{jenkinsFolderName}
        </if>
        <if test='jenkinsJobName!=null and jenkinsJobName!=""'>
            where jenkins_job_name = #{jenkinsJobName}
        </if>
    </select>
	====================================================================================================