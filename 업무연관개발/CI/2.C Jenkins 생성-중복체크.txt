[ Jenkins 생성 중복체크 ]
	프로젝트 생성시에 중복체크 하도록 작성
	
# 순서
	
	1. 최상단일 경우에는 DB와 Jenkins에서 둘다 확인한다.
		job 이든 folder이든 같은 이름 사용은 불가능
		ex) job으로 jenkins001 을 생성햇으면 folder 로 jenkins001 을 생성 할 수 없음
		
		정규식 체크 해야함
	
	
	2. 최상단이 아닐경우 해당 폴더 내에 존재하는 job과 folder의 이름들중 중복되는 값이 있는지 체크
		정규식 체크 해야함
	
	
	
	


# 1. 최상단 중복 체크
	
	1. DB에서 해당 프로젝트의 Jenkins를 전부다 들고옴
	2. 들고온 list와 현재 받아온 job , folder 리스트를 비교함
	3. DB비교가 다 끝난 애들은 jenkins 서버와 비교를 시작함
	4. 종료
	
	2번항목에서 이중for문 , 3번항목에서 이중for문으로 중복되는데
	DB체크를 다 끝낸뒤에 API를 호출해서 중복체크하는게 좋아보임



# 컨트롤러
	NewInsertProjectVO 를 넘겨받아서 거기서 jenkins만 추출해서 보냄.
	현재 중복체크로직도 저렇게 저부분만 빼내서 보내고있음
	====================================================================================================
	@ApiOperation(value = "Jenkins insert 중복체크",notes = "프로젝트 생성시 전달되는 insertvo를 그대로 받아서 젠킨스만 중복체크함")
	@RequestMapping(value = "/jenkins/insertValidationCheck", method = RequestMethod.POST)
	public void jenkinsValidationCheck(@RequestBody  NewInsertProjectVO newInsertProjectVO ) {
		System.out.println(newJenkinsService.insertJenkinsDBValidationCheck(newInsertProjectVO.getJenkins()));
	}
	====================================================================================================
	
# 서비스

	중복체크 첫번째 메소드 jenkinsDBValidationCheck
	애는 최상단의 job 과 folder 를 DB에서 체크하도록 하였음
	DB에서 중복이 발생하면 굳이 서버나 다른곳까지 체크할 필요가없으니까 먼저함.
	그리고 전달받은 목록내에서 중복되는 항목이 있는지 체크하도록 함
	
	====================================================================================================
    /**
     * jenkins 최상위 folder , job 의 DB 중복체크 - insert 에서 사용
     * @param jenkins
     * @return Map<String, Object>
     */
    public Map<String, Object> insertJenkinsDBValidationCheck(NewInsertJenkinsVO jenkins) { 
    	
		Map<String, Object> result = new HashMap<String, Object>();
		List<NewInsertJenkinsVO> insertJenkinsFolderList = jenkins.getFolders();
		List<NewInsertJenkinsVO> insertJenkinsJobList = jenkins.getJobs();
		String compare = "";

		for(int i=0;i<insertJenkinsFolderList.size();i++) {
			//최상단 folder DB 목록 중복 체크
			if(newJenkinsMapper.insertValidJenkinsCheck(insertJenkinsFolderList.get(i))!=0) {
				result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
				return result;				
			}
			//folder 정규식 체크
			result = insertJenkinsToolValidationCheck(insertJenkinsFolderList,null);
			if(!result.isEmpty()) {
				return result;
			}
			
			//같은 목록안에 중복된 값이 있는지 확인
			compare = insertJenkinsFolderList.get(i).getJenkinsFolderName();
			for(int j=0;j<insertJenkinsFolderList.size();j++) {
				if(i!=j) {
					if(insertJenkinsFolderList.get(j).getJenkinsFolderName().equalsIgnoreCase(compare)) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
						return result;	
					}
				}
			}
			//같은 뎁스에 중복된 Job명이 있는지 확인
			for(int k=0;k<insertJenkinsJobList.size();k++) {
				if(compare.equalsIgnoreCase(insertJenkinsJobList.get(k).getJenkinsJobName())) {
					result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명과 JOB 명", "ko"));
					return result;	
				}
			}
			
			
		}
		
		for(int i=0;i<insertJenkinsJobList.size();i++) {
			//최상단 job 목록 DB Check 중복 체크
			if(newJenkinsMapper.insertValidJenkinsCheck(insertJenkinsJobList.get(i))!=0) {
				result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
				return result;		
			}
			//같은 목록안에 중복된 값이 있는지 확인
			compare = insertJenkinsJobList.get(i).getJenkinsJobName();
			for(int j=0;j<insertJenkinsJobList.size();j++) {
				if(i!=j) {
					if(insertJenkinsJobList.get(j).getJenkinsJobName().equalsIgnoreCase(compare)) {
						result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
						return result;	
					}
				}
			}
		}
		// 정규식 체크 및 tool중복 체크
		result = insertJenkinsToolValidationCheck(insertJenkinsJobList,null);
		if(!result.isEmpty()) {
			return result;
		}
		
    	return result;
    }


	====================================================================================================

	
	중복체크 두번째 메소드 jenkinsToolValidationCheck
	정규식 체크와 tool에 존재하는지 체크하는메소드 
	별도로 진행하면 좋긴한데, 그러면 for문도 두번돌아야되고.. 하나꺼낼때마다 하나씩 체크하도록 했음
	재귀함수로 이뤄져있어서, 하위의 폴더나 잡이있으면 계속 호출됨
	====================================================================================================
    /**
     * 젠킨스의 folder , job 의 정규식 체크, 재귀함수로 사용중이여서 하위폴더 , 하위job까지 확인 - insert 에서 사용
     * @param insertJenkinsFolderList
     * @param uri
     * @return Map<String, Object>
     */
    public Map<String, Object> insertJenkinsToolValidationCheck(List<NewInsertJenkinsVO> insertJenkinsFolderList,String paramURL){
		Matcher match;
		Map<String, Object> result = new HashMap<String, Object>();
		String regexJenkins  = "^([A-Za-z0-9ㄱ-힣]{1})[a-zA-Z0-9ㄱ-힣-_(),.\\s]{0,84}$";
		String url = paramURL;
		if(paramURL==null) {
			url = jenkinsUrl;
		}
		
		//List<NewInsertJenkinsVO> insertJenkinsFolderList = insertJenkinsFolderList
		for(int i=0; i<insertJenkinsFolderList.size();i++) {

			if(insertJenkinsFolderList.get(i).getDivision()==1) {
				String folderName = insertJenkinsFolderList.get(i).getJenkinsFolderName();	
				//정규식 체크
		        match = Pattern.compile(regexJenkins).matcher(folderName);
		        if(!match.find()) {
				    result.put("msg", DbMessageManager.getMessage("E0125", new Object[]{"Jenkins 폴더명", "특수문자로 시작할 수 없으며 한글,영문대소문자,숫자,특수문자 -_().,","1","85"}, "ko"));
				    return result;  
		        }
		        
		        
				for(int j=0;j<insertJenkinsFolderList.size();j++) {
					if(i!=j && insertJenkinsFolderList.get(j).getDivision()==1) {
						if(insertJenkinsFolderList.get(j).getJenkinsFolderName().equalsIgnoreCase(folderName)) {
							result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
							return result;	
						}
					}
					
					//바로 하위 뎁스에 중복된 Job명이 있는지 확인
					List<NewInsertJenkinsVO> compareFolderList = insertJenkinsFolderList.get(i).getFolders();
					List<NewInsertJenkinsVO> compareJobList = insertJenkinsFolderList.get(i).getJobs();
					for(int k=0;k<compareFolderList.size();k++) {
						for(int l=0;l<compareJobList.size();l++) {
							if(compareFolderList.get(k).getJenkinsFolderName().equalsIgnoreCase(compareJobList.get(l).getJenkinsJobName())) {
								result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명과 JOB 명", "ko"));
								return result;	
							}
						}
					}
				}
		        
		        if(existFolderOrJob(url, insertJenkinsFolderList.get(i).getJenkinsFolderName())) {
					result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins 폴더명", "ko"));
					return result;	
		        }
		        
		        //하위폴더 체크
		        if(insertJenkinsFolderList.get(i).getFolders().size()>0) {

		        	result = insertJenkinsToolValidationCheck(insertJenkinsFolderList.get(i).getFolders(),url+ "/job/" + insertJenkinsFolderList.get(i).getJenkinsFolderName());
		        	
					if(!result.isEmpty()) {
						return result;
					}
		        }
		        //하위 잡 체크
		        if(insertJenkinsFolderList.get(i).getJobs().size()>0) {

		        	result = insertJenkinsToolValidationCheck(insertJenkinsFolderList.get(i).getJobs(),url+ "/job/" + insertJenkinsFolderList.get(i).getJenkinsFolderName());

					if(!result.isEmpty()) {
						return result;
					}
		        }
				
			}else {
				
				String jobName = insertJenkinsFolderList.get(i).getJenkinsJobName();
				//정규식 체크
				match = Pattern.compile(regexJenkins).matcher(jobName);
				if(!match.find()) {
					result.put("msg", DbMessageManager.getMessage("E0125", new Object[]{"Jenkins job명", "특수문자로 시작할 수 없으며 한글,영문대소문자,숫자,특수문자 -_().,","1","85"}, "ko"));
					return result;  
				}
				for(int j=0;j<insertJenkinsFolderList.size();j++) {
					if(i!=j && insertJenkinsFolderList.get(j).getDivision()==2) {
						if(insertJenkinsFolderList.get(j).getJenkinsJobName().equalsIgnoreCase(jobName)) {
							result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
							return result;	
						}
					}
				}
				if(existFolderOrJob(url, insertJenkinsFolderList.get(i).getJenkinsJobName())) {
					result.put("msg", DbMessageManager.getMessage("E0016", "Jenkins job명", "ko"));
					return result;	
				}
			}
		}
		return result;
    }
	
	====================================================================================================

	중복체크 세번째 메소드 existFolderOrJob
	애는 해당 폴더 또는 해당 job이 tool 에 존재하는지 체크하는 애임
	어쩌피 최상단이 신규이면 tool 체크는 하지 않아도 되는데 프로젝트 수정부분에서 사용하려고 좀더 만들어놨음.
	기존의 메소드랑 같은 이름이며, 기존의 메소드는 foldername , jobname 등을 다 받아서 처리하도록 해놨었음.
	근데 이제 하위로계속 생길수 있기에, 최종적으로 확인해야 할 folder 명 이나 job명과 url 을 받도록 하였음
	====================================================================================================
    /**
     * Jenkins Folder 또는 Job이 존재하는지 Validation Check
     * @param uri
     * @param name
     * @return boolean
     */
    public boolean existFolderOrJob(String uri,String name) {
        uri = uri +  "/job/" + name + "/api/json";
        LOGGER.info("existFolderOrJob :" +  uri);
        try {
            ResponseEntity<String> responseResult = callJenkinsRestApiForJson("GET", uri, null);

            if(responseResult.getStatusCode() == HttpStatus.OK) {
                LOGGER.info("Jenkins REST API : Get jenkins informatin is found!");
            } else {
                if(responseResult.getStatusCode() == HttpStatus.NOT_FOUND) {
                    LOGGER.info("Jenkins REST API : Get jenkins informatin is not found!");
                    return false;
                } else {
                    LOGGER.error("Jenkins REST API is fail, Return code : " + responseResult.getStatusCodeValue());
                }
            }

        } catch(HttpClientErrorException ce) {
            HttpStatus status = ce.getStatusCode();
            if(status == HttpStatus.NOT_FOUND) {
                LOGGER.info("Jenkins REST API : Get jenkins informatin is not found!");
                return false;
            } else {
                LOGGER.error("Jenkins REST API error: {}", ce.getMessage());
            }
        } catch(HttpServerErrorException se) {
            LOGGER.error("Jenkins REST API error: {}", se.getMessage());
        }
        
        
    	return true;
    }
	
	====================================================================================================

# VO	
	====================================================================================================
	package com.sumgchuldspace.portal.project.jenkins.test;

	import java.util.ArrayList;
	import java.util.List;

	import com.sumgchuldspace.portal.member.vo.GetMembersVO;
	import com.sumgchuldspace.portal.jira.vo.GetProjectJiraVO;
	import com.sumgchuldspace.portal.project.codeeyes.vo.GetCodeEyesVO;
	import com.sumgchuldspace.portal.project.gitlab.vo.InsertGitLabVO;
	import com.sumgchuldspace.portal.project.jenkins.vo.InsertJenkinsVO;
	import com.sumgchuldspace.portal.project.sparrow.vo.GetSparrowsVO;
	import com.sumgchuldspace.portal.user.vo.GetUserToolsLogin;

	import io.swagger.annotations.ApiModelProperty;

	public class NewInsertProjectVO {
		/**
		 * 순번 - 프로젝트 ID
		 */
		@ApiModelProperty(required = true, name = "id", value = "순번 - 프로젝트 ID", dataType = "Long")
		private Long id;
		
		/**
		 * 프로젝트 그룹 ID
		 */
		@ApiModelProperty(name = "projectGroupId", value = "프로젝트 그룹 ID", dataType = "Long")
		private Long projectGroupId;
		
		/**
		 * 프로젝트 그룹 Slug
		 */
		@ApiModelProperty(name = "projectGroupSlug", value = "프로젝트 그룹 Slug", dataType = "String")
		private String projectGroupSlug;
		
		/**
		 * 프로젝트명
		 */
		@ApiModelProperty(name = "projectName", value = "프로젝트명", dataType = "String")
		private String projectName;
		
		/**
		 * 프로젝트 설명
		 */
		@ApiModelProperty(name = "projectDesc", value = "프로젝트 설명", dataType = "String")
		private String projectDesc;

		/**
		 * 프로젝트 Slug
		 */
		@ApiModelProperty(name = "projectSlug", value = "프로젝트 Slug", dataType = "String")
		private String projectSlug;
		
		/**
		 * 애플리케이션에 소속된 MemberList VO
		 */
		@ApiModelProperty(name = "members", value = "애플리케이션에 소속된 MemberList VO", dataType = "List")
		private List<GetMembersVO> members = new ArrayList<>();
		
		/**
		 * 애플리케이션에 소속된 Jira VO
		 */
		@ApiModelProperty(name = "jira", value = "애플리케이션에 소속된 Jira VO", dataType = "JiraVO")
		private GetProjectJiraVO jira;
		
		/**
		 * 애플리케이션에 소속된 GitList VO
		 */
		@ApiModelProperty(name = "git", value = "애플리케이션에 소속된 GitList VO", dataType = "InsertGitLabVO")
		private InsertGitLabVO git;
		
		/**
		 * 애플리케이션에 소속된 JenkinsList VO
		 */
		@ApiModelProperty(name = "jenkins", value = "애플리케이션에 소속된 JenkinsList VO", dataType = "InsertJenkinsVO")
		private NewInsertJenkinsVO jenkins;
		
		/**
		 * 애플리케이션에 소속된 SparrowList VO
		 */
		@ApiModelProperty(name = "sparrow", value = "애플리케이션에 소속된 SparrowList VO", dataType = "List")
		private List<GetSparrowsVO> sparrows = new ArrayList<>();
		
		/**
		 * 애플리케이션에 소속된 CodeEyesList VO
		 */
		@ApiModelProperty(name = "codeeye", value = "애플리케이션에 소속된 CodeeyeList VO", dataType = "List")
		private List<GetCodeEyesVO> codeeyes = new ArrayList<>();
		
		/** 각 Tool 별 접속여부 VO
		 * => JIRA / Git / Jenkins / Nexus (추후 Tool 은 추가될 수 있음)
		 */
		@ApiModelProperty(name = "exists", value = "Tool 별 접속여부 VO", dataType = "GetUserToolsLogin")
		private GetUserToolsLogin exists;
		
		/**
		 * 등록자
		 */
		@ApiModelProperty(name = "createdBy", value = "등록자", dataType = "String")
		private String createdBy;
		
		/**
		 * 수정자
		 */
		@ApiModelProperty(name = "lastModifiedBy", value = "수정자", dataType = "String")
		private String lastModifiedBy;

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public Long getProjectGroupId() {
			return projectGroupId;
		}

		public void setProjectGroupId(Long projectGroupId) {
			this.projectGroupId = projectGroupId;
		}

		public String getProjectGroupSlug() {
			return projectGroupSlug;
		}

		public void setProjectGroupSlug(String projectGroupSlug) {
			this.projectGroupSlug = projectGroupSlug;
		}

		public String getProjectName() {
			return projectName;
		}

		public void setProjectName(String projectName) {
			this.projectName = projectName;
		}

		public String getProjectDesc() {
			return projectDesc;
		}

		public void setProjectDesc(String projectDesc) {
			this.projectDesc = projectDesc;
		}

		public String getProjectSlug() {
			return projectSlug;
		}

		public void setProjectSlug(String projectSlug) {
			this.projectSlug = projectSlug;
		}

		public List<GetMembersVO> getMembers() {
			return members;
		}

		public void setMembers(List<GetMembersVO> members) {
			this.members = members;
		}

		public GetProjectJiraVO getJira() {
			return jira;
		}

		public void setJira(GetProjectJiraVO jira) {
			this.jira = jira;
		}

		public InsertGitLabVO getGit() {
			return git;
		}

		public void setGit(InsertGitLabVO git) {
			this.git = git;
		}

		public NewInsertJenkinsVO getJenkins() {
			return jenkins;
		}

		public void setJenkins(NewInsertJenkinsVO jenkins) {
			this.jenkins = jenkins;
		}

		public List<GetSparrowsVO> getSparrows() {
			return sparrows;
		}

		public void setSparrows(List<GetSparrowsVO> sparrows) {
			this.sparrows = sparrows;
		}

		public List<GetCodeEyesVO> getCodeeyes() {
			return codeeyes;
		}

		public void setCodeeyes(List<GetCodeEyesVO> codeeyes) {
			this.codeeyes = codeeyes;
		}

		public GetUserToolsLogin getExists() {
			return exists;
		}

		public void setExists(GetUserToolsLogin exists) {
			this.exists = exists;
		}

		public String getCreatedBy() {
			return createdBy;
		}

		public void setCreatedBy(String createdBy) {
			this.createdBy = createdBy;
		}

		public String getLastModifiedBy() {
			return lastModifiedBy;
		}

		public void setLastModifiedBy(String lastModifiedBy) {
			this.lastModifiedBy = lastModifiedBy;
		}

		@Override
		public String toString() {
			return "NewInsertProjectVO [id=" + id + ", projectGroupId=" + projectGroupId + ", projectGroupSlug="
					+ projectGroupSlug + ", projectName=" + projectName + ", projectDesc=" + projectDesc + ", projectSlug="
					+ projectSlug + ", members=" + members + ", jira=" + jira + ", git=" + git + ", jenkins=" + jenkins
					+ ", sparrows=" + sparrows + ", codeeyes=" + codeeyes + ", exists=" + exists + ", createdBy="
					+ createdBy + ", lastModifiedBy=" + lastModifiedBy + "]";
		}

	}


	
	
	====================================================================================================

	
# 맵퍼(java)
	
	====================================================================================================
	public int insertValidJenkinsCheck(NewInsertJenkinsVO vo);
	====================================================================================================

# 맵퍼(xml)
	====================================================================================================
    <select id="insertValidJenkinsCheck" resultType="Integer" parameterType="NewJenkinsParamVO" >
       select count(*) from jenkins_mn_job
        <if test='jenkinsFolderName!=null and jenkinsFolderName!=""'>
            where jenkins_folder_name = #{jenkinsFolderName}
        </if>
        <if test='jenkinsJobName!=null and jenkinsJobName!=""'>
            where jenkins_job_name = #{jenkinsJobName}
        </if>
    </select>
	
	====================================================================================================
