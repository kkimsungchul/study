[ Effective Java - 챕터2. Builder 패턴 사용하기 ]
	https://github.com/kkimsungchul/study/blob/master/Spring%20Boot/%5BSpring%20Boot%5D%20lombok%20%EC%82%AC%EC%9A%A9.txt
	위의 링크를 보고 lombok을 세팅하면 굳이 아래와 같이 builder 을 가진 클래스를 생성하지 않고
	Builder 패턴을 사용할 수 있음


# Main 클래스
	=================================================================================================================
	package EffectiveJava.builder_2;

	public class BuilderTest {
		public static void main(String[]args){
			UserVO userVO = UserVO
					.builder()
					.setAge(33)
					.setName("김성철")
					.build();
			System.out.println(userVO);
		}
	}

	=================================================================================================================



# Builder 패턴을 적용한 UserVO클래스

	=================================================================================================================
	package EffectiveJava.builder_2;

	public class UserVO {

		private String name;
		private int age;

		public UserVO(String name, int age) {
			this.name = name;
			this.age = age;
		}
		public static Builder builder() {
			return new Builder();
		}

		@Override
		public String toString() {
			return "UserVO{" +
					"name='" + name + '\'' +
					", age=" + age +
					'}';
		}

		static class Builder{

			private String name;
			private int age;

			public Builder(){}

			public Builder setName(String name){
				this.name = name;
				return this;
			}
			public Builder setAge(int age){
				this.age = age;
				return this;
			}

			public UserVO build(){
				return new UserVO(name,age);
			}

		}
	}

	=================================================================================================================


	=================================================================================================================


	package com.sungchul.equals;

	import java.util.Objects;

	public class MemberVO {
		private String username;
		private String email;
		private String password;

		private MemberVO(Builder builder) {
			this.username = builder.username;
			this.email = builder.email;
			this.password = builder.password;
		}

		public String getUsername() {
			return username;
		}

		public String getEmail() {
			return email;
		}

		public String getPassword() {
			return password;
		}

		public static class Builder {
			private String username;
			private String email;
			private String password;

			public Builder setUsername(String username) {
				this.username = username;
				return this;
			}

			public Builder setEmail(String email) {
				this.email = email;
				return this;
			}

			public Builder setPassword(String password) {
				this.password = password;
				return this;
			}

			public MemberVO build() {
				return new MemberVO(this);
			}
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			MemberVO memberVO = (MemberVO) o;
			return Objects.equals(username, memberVO.username) &&
					Objects.equals(email, memberVO.email) &&
					Objects.equals(password, memberVO.password);
		}

		@Override
		public int hashCode() {
			return Objects.hash(username, email, password);
		}
	}
	=================================================================================================================