# SpringBoot - JPA 강의 정리-20(값 타입 - 임베디드 타입)

# 임베디드 타입(복합 값 타입)
	- 새로운 값 타입을 직접 정의할 수 있음
	- JPA는 임베디드 타입(embedded type)이라 함
	- 주로 기본 값 타입을 모아서 만들어 복합 값 타입이라고도 함
	- int , String 같은 값 타입 (추적이안됨, 변경하면 끝임)
	- 임베디드 타입의 값이 null 이면 매핑한 컬럼 값은 모두 null

# 임베디드 타입(예시)
	city , street , zipcode 세개가 있을 때
	세개를 모아서 homeAddress 라는 타입으로 묶음

# 임베디드 타입 사용법
	@Embeddable : 값 타입을 정의하는 곳에 표시
	@Embedded : 값 타입을 사용하는 곳에 표시
	※ 기본 생성자 필수

# 임베디드 타입의 장점
	- 재사용
	- 높은 응집도
	- Period.isWork() 처럼 해당 값 타입만 사용하는 의미있는 메소드를 만들 수 있음
		※ Period는 근무 시작일, 종료일 로 만든 임의의 임베디드 타입
	- 임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명주기를 의존함

# 임베디드 타입과 테이블 매핑
	- 임베디드 타입은 엔티티의 값일 뿐임
	- 임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.
	※ @Embeded 사용 전과 후의 테이블은 차이가 없음
		=====================================================================
		create table Member (
		   MEMBER_ID bigint not null,
			createdBy varchar(255),
			createdDate timestamp,
			lastModifiedBy varchar(255),
			lastModifiedDate timestamp,
			city varchar(255),
			endDate timestamp,
			startDate timestamp,
			street varchar(255),
			USERNAME varchar(255),
			zipcode varchar(255),
			TEAM_ID bigint,
			primary key (MEMBER_ID)
		)
		=====================================================================
	
	- 객체와 테이블을 아주 세밀하기(find-grained) 매핑하는 것이 가능
	- 잘 설계한 ORM 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 더 많음
	※ 현업에서 그렇게 많이 쓰진 않지만, 공통으로 관리하면 편리하게 사용할수 있는 부분들이 생김

# AttributeOverride 
	- 속성 재정의
	- 한 엔티티에서 같은 값 타입을 사용했을때 컬럼명이 중복됨
		ex) 
		=====================================================================
		private Address workdAddress;
		private Address homeAddress;
		=====================================================================
		error code : Repeated column in mapping for entity:
	@AttributeOverrides , @AttributeOverride 사용

# AttributeOverride 적용
	=====================================================================
    @Embedded
    @AttributeOverrides({
            @AttributeOverride(name="city" , column = @Column(name = "WORK_CITY")),
            @AttributeOverride(name="street" , column = @Column(name = "WORK_STREET")),
            @AttributeOverride(name="zipcode" , column = @Column(name = "WORK_ZIPCODE")),
    })
    private Address workAddress;
	=====================================================================

	- 적용시 테이블 생성 쿼리문
	=====================================================================
    create table Member (
       MEMBER_ID bigint not null,
        createdBy varchar(255),
        createdDate timestamp,
        lastModifiedBy varchar(255),
        lastModifiedDate timestamp,
        city varchar(255),
        street varchar(255),
        zipcode varchar(255),
        USERNAME varchar(255),
        WORK_CITY varchar(255),
        WORK_STREET varchar(255),
        WORK_ZIPCODE varchar(255),
        endDate timestamp,
        startDate timestamp,
        TEAM_ID bigint,
        primary key (MEMBER_ID)
    )
	=====================================================================


# 임베디드 값 타입 매핑 예시
	
	Member.java
	=====================================================================
	@Entity
	public class Member extends BaseEntity{

		@Id @GeneratedValue
		@Column(name ="MEMBER_ID")
		private Long id;

		@Column(name = "USERNAME")
		private String username;

		@Embedded
		private Period workPeriod;

		@Embedded
		private Address address;
	
		... 중략 ...
	}
	=====================================================================

	Address.java
	=====================================================================
	@Embeddable
	public class Address {
		private String city;
		private String street;
		private String zipcode;
	}
	=====================================================================

	Period.java
	=====================================================================
	@Embeddable
	public class Period {
		private LocalDateTime startDate;
		private LocalDateTime endDate;
	}
	=====================================================================