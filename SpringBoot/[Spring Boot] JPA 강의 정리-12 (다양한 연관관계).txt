# SpringBoot - JPA 강의 정리-12(다양한 연관관계)

# 연관관계 매핑시 고려사항 세가지
	- 다중성
		다대일[N:1] - @ManyToOne

		일대다[1:N] -	@OneToMany

		일대일[1:1] - @OneToOne

		다대다[N:M] - @ManyToMany
			실무에서 사용하지 않음

	- 단방향 , 양방향
		테이블 :
			외래 키 하나로 양쪽 조인 가능
			사실 방향이라는 개념이 없음
		객체 : 
			참조용 필드가 있는 쪽으로만 참조 가능
			한쪽만 참조하면 단방향
			양쪽이 서로 참조하면 양방향

	- 연관관계의 주인
		테이블은 외래 키 하나로 두 테이블의 연관관계를 맺음
		객체 양방향관계는 A->B , B->A 처럼 참조가 두곳임
		객체 양방향 관계는 참조가 두군데 있음, 둘중 테이블의 외래 키를 관리할 곳을 지정해야 함
		
		연관관계의 주인 :  외래 키를 관리하는 참조
		주인의 반대편 : 외래 키에 영향을 주지 않음, 단순 조회만 가능(mappedBy)


# 다대일[N:1]
	@ManyToOne
	N:1에서 N쪽에 외래키가 있어야 함.
	=====================================================================
	- MEMBER
		MEMEBER_ID(PK)
		TEAM_ID(FK)
		USERNAME
	
	- TEAM
		TEAM_ID(PK)
		NAME
	=====================================================================
	가장 많이 사용하는 연관관계
	외래 키가 있는 쪽이 연관관계의 주인
	양쪽을 서로 참조하도록 개발
	

# 일대다[1:N]
	@OneToMany
	실무에서 권장하지 않음
	일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하자

	Member에는 Team에 대한 객체가 없음
	=====================================================================
	@Entity //필수
	public class Member {

		@Id @GeneratedValue
		@Column(name ="MEMBER_ID")
		private Long id;

		@Column(name = "USERNAME")
		private String username;
	

	-----
	@Entity
	public class Team {

		@Id @GeneratedValue
		@Column(name="TEAM_ID")
		private Long id;

		private String name;
		
		@OneToMany//연관된 객체의 변수명
		@JoinColumn(name="TEAM_ID")
		private List<Member> members = new ArrayList<>();
	=====================================================================

	일대다 단뱡향은 일대다(1:N)에서 1이 연관관계의 주인
	테이블 일대다 관계는 항상 다(N)쪽에 외래키가 있음
	객체와 테이블의 차이 때문에 반대편에 테이블의 외래 키를 관리하는 특이한 구조
	@JoinColumn을 꼭 사용해야함, 그렇지 않으면 조인 테이블 방식을 사용함(중간에 테이블을 하나 추가함)


	- 단점
		엔티티가 관리하는 외래 키가 다른 테이블에 있음
		연관관계 관리를 위해 추가로 UPDATE SQL 실행
	
	- 일대다 양방향
		이런 매핑은 공식적으로 존재하지 않음
		@JoinColumn(name="TEAM_iD",insertable = false , updatable = false)
		읽기 전용 필드를 사용해서 양방향 처럼 사용하는 방법
		다대일 양방향을 사용하자


# 일대일[1:1]
	@OneToOne
	일대일 관계는 그 반대도 일대일
	주 테이블이나 대상 테이블 중에 외래 키 선택 가능
		주 테이블에 외래 키
		대상 테이블에 외래 키
	외래 키에 데이터베이스 유니크 제약조건 추가
	다대일 양방향 매핑과 비슷함
	다대일 양방향 매핑처럼 외래 키가 있는 곳이 연관관계의 주인
	반대편은 mappedBy 적용
	
	대상 테이블에 외래 키가 있는 경우는 불가능함, 양방향 관계에서는 지원이 됨
	일대일 관계에서는 본인 테이블에 있는 엔티티만 관리한다고 보면 됨


	[ 주 테이블에 외래키 구조 ]
	※ 아래의 class는 주 테이블에 외래키 구조로 되어 있음
		- Member
			MEMBER_ID(PK)
			LOCKER_ID(FK,UNIQUE)
			USERNAME

		- LOCKER
			LOCKER_ID(PK)
			NAME
	[ 대상 테이블에 외래키 구조 ]
		- Member
			MEMBER_ID(PK)
			USERNAME

		- LOCKER
			LOCKER_ID(PK)
			MEMBER_ID(FK,UNIQUE)
			NAME		
	
	=====================================================================
	@Entity //필수
	public class Member {
		@OneToOne
		@JoinColumn(name ="LOCKER_ID")
		private Locker locker;

	---
	@Entity
	public class Locker {

		@Id @GeneratedValue
		@Column(name ="LOCKER_ID")
		private Long id;

		private String name;

		@OneToOne(mappedBy = "locker")
		private Member member;
	=====================================================================


	- 정리
		주 테이블에 외래 키
			주 객체가 대상 객체의 참조를 가지는 것 처럼 주 테이블에 외래 키를 두고 대상 테이블을 찾음
			객체지향 개발자 선호
			JPA 매핑 편리
			장점 : 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
			단점 : 값이 없으면 외래 키에 null 허용
		대상 테이블에 외래 키
			대상 테이블에 외래 키가 존재
			전통적인 데이터베이스 개발자 선호
			장점 : 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
			단점 : 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨

	- 개인 사족		
		자연스럽게 주 테이블에 외래 키로 설명해서 해당 내용으로 코드를 작성했었는데,
		내가 진행하는 프로젝트들은 전부다 대상 테이블에 외래키가 있음
		DBA 관점에서는 대상 테이블에 외래 키가 맞음
		개발자 관점에서는 락커가 없는 경우도 있으니까 Member 객체에 Locker을 들고 있는게 맞다고 봄
		...
		DBA랑 싸우지말고 걍 양방향 매핑하자



# 다대다[N:M]
	※ 편리해보이지만 실무에서 사용하지 말것
	관계형 데이터베이스는 정규화된 테이블 2개로 다대다(N:M) 관계를 표현할 수 없음
	연결 테이블을 추가해서 일대다(1:N), 다대일(N:1) 관계로 풀어내야 함
	
	객체는 컬렉션을 사용해서 객체 2개로 다대다(N:M) 관계 가능
	@ManyToMany 사용
	@JoinTable로 연결 테이블 지정
	다대다 매핑 : 단방향 양방향 가능
	연결 테이블이 단순히 연결만 하고 끝나지 않음
	주문시간, 수량 같은 데이터가 들어올 수 있음
	쿼리도.. 막나감

	다대다 한계 극복을 위해 연결 테이블용 엔티티 추가 (연결테이블을 엔티티로 승격)
	@ManyToMany ->  @OneToMany , @ManyToOne 으로 다대다를 구현


# 다대다[N:M] 샘플코드
	@ManyToMany ->  @OneToMany , @ManyToOne 으로 다대다를 구현

	Member.java
	=====================================================================
	package org.hello.jpa.member.domain;

	import javax.persistence.*;
	import java.util.ArrayList;
	import java.util.Date;
	import java.util.List;


	@Entity //필수
	public class Member {

		@Id @GeneratedValue
		@Column(name ="MEMBER_ID")
		private Long id;

		@Column(name = "USERNAME")
		private String username;

	//    @Column(name="TEAM_ID")
	//    private Long teamId;

		@ManyToOne
		@JoinColumn(name ="TEAM_ID")
		private Team team;

		@OneToOne
		@JoinColumn(name ="LOCKER_ID")
		private Locker locker;



		@OneToMany(mappedBy = "member")
		private List<MemberProduct> memberProducts = new ArrayList<>();


		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getUsername() {
			return username;
		}

		public void setUsername(String username) {
			this.username = username;
		}

		public Team getTeam() {
			return team;
		}

		public void setTeam(Team team) {
			this.team = team;
			team.getMembers().add(this);
		}

		public Locker getLocker() {
			return locker;
		}

		public void setLocker(Locker locker) {
			this.locker = locker;
		}
	}


	=====================================================================

	Product.java
	=====================================================================
	package org.hello.jpa.member.domain;

	import javax.persistence.*;
	import java.util.ArrayList;
	import java.util.List;

	@Entity
	public class Product {

		@Id @GeneratedValue
		private Long id;

		private String name;

		@OneToMany(mappedBy = "product")
		private List<MemberProduct> memberProducts = new ArrayList<>();

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}
	}

	=====================================================================

	MemberProduct.java
	=====================================================================
	package org.hello.jpa.member.domain;

	import javax.persistence.*;
	import java.time.LocalDateTime;

	@Entity
	public class MemberProduct {

		@Id @GeneratedValue
		private Long id;


		@ManyToOne
		@JoinColumn(name="MEMBER_ID")
		private Member member;

		@ManyToOne
		@JoinColumn(name="PRODUCT_ID")
		private Product product;

		private int count;

		private int price;

		private LocalDateTime orderDateTime;

	}

	=====================================================================

# 실전예제 
