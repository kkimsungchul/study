# Spring 과 SpringBoot 의 차이

	Spring과 Spring Boot은 모두 Java 기반의 웹 애플리케이션 개발 프레임워크이지만, 몇 가지 차이점이 있습니다.
	Spring Boot는 Spring Framework를 기반으로 만들어진 간편한 설정 방식을 제공하는 도구입니다. 
	따라서 Spring Boot는 Spring Framework보다 더 높은 추상화 수준을 가지고 있으며, 개발자가 애플리케이션을 빠르게 구축하고 실행할 수 있도록 지원합니다.

# Spring Framework의 특징과 장단점
	- Spring Framework는 경량화된 자바 기반 프레임워크로서, 	DI (Dependency Injection) 와 AOP (Aspect Oriented Programming) 를 통해 객체 지향 프로그래밍에 맞는 개발 방식을 지원합니다. 
	이를 통해 코드의 유연성과 확장성이 증가하며, 유지보수가 용이합니다.
	
	- Spring Framework는 다양한 모듈을 제공하며, 개발자는 필요한 모듈만 선택하여 사용할 수 있습니다. 이를 통해 애플리케이션의 무게를 가볍게 유지할 수 있습니다.
	
	- Spring Framework는 Java EE 환경에서 사용하기 적합한 기술 스택을 제공합니다.
	
	- Spring Framework는 기본적으로 XML을 이용한 설정 방식을 제공합니다. 이는 설정이 복잡해지는 단점이 있습니다.

# Spring Boot의 특징과 장단점

	- Spring Boot는 Spring Framework를 기반으로 만들어진 간편한 설정 방식을 제공합니다. 
	개발자는 설정 파일의 작성 없이 애플리케이션을 구성할 수 있습니다.

	- Spring Boot는 자체 내장 서버(Tomcat, Jetty, Undertow 등)를 제공하여 개발자가 서버를 구축하고 실행할 필요가 없습니다.

	- Spring Boot는 개발자가 애플리케이션을 구축하기 위한 다양한 의존성을 자동으로 관리합니다. 
	이를 통해 애플리케이션의 구성과 실행이 간단해집니다.

	- Spring Boot는 Spring Framework보다 더 높은 추상화 수준을 가지고 있으며, 개발자가 빠르게 애플리케이션을 구축하고 실행할 수 있도록 지원합니다.

	- Spring Boot는 설정을 자동화하기 때문에, 개발자가 설정 파일의 작성에 시간을 투자할 필요가 없습니다. 
	하지만 이는 설정이 복잡한 경우에는 제대로 된 설정을 하기 어렵다는 단점이 있습니다.

	- Spring Boot는 개발자가 애플리케이션을 구축하기 위해 필요한 의존성을 자동으로 관리하기 때문에, 라이브러리의 버전을 관리하기 쉽습니다.

	- Spring Boot는 스프링의 여러 기술들을 기본으로 제공하기 때문에, 개발자가 기존의 스프링 애플리케이션을 Spring Boot 애플리케이션으로 쉽게 이전할 수 있습니다.

	- Spring Boot는 기본적으로 애플리케이션의 실행 환경을 설정하기 때문에, 배포와 실행이 쉽습니다.

	- Spring Boot는 마이크로서비스 아키텍처를 구현하는 데 적합한 프레임워크입니다.


# 설정 방식 :
	Spring Framework는 XML 파일이나 JavaConfig를 사용하여 설정을 처리합니다.
	Spring Boot는 자동 설정 기능을 제공하며, 프로젝트 생성 시 기본 설정을 제공합니다.
	또한 Spring Boot는 애노테이션(annotation)을 사용하여 설정을 단순화합니다.

# 의존성 관리 :
	Spring은 의존성 관리를 위해 Maven이나 Gradle과 같은 빌드 도구를 사용합니다. 
	Spring Framework는 개발자가 필요한 라이브러리를 직접 추가하고 관리해야 합니다.
	Spring Boot는 의존성 관리 기능을 제공하여 개발자가 추가한 라이브러리와 해당 라이브러리가 의존하는 다른 라이브러리들을 자동으로 관리합니다.
	
# 내장 서버 :
	Spring Framework는 Servlet 컨테이너를 제공하지 않습니다. 
	따라서 Spring은 톰캣(Tomcat), 제티(Jetty)와 같은 외부 서버를 사용해야 합니다.
	Spring Boot는 Tomcat, Jetty, Undertow 등의 Servlet 컨테이너를 내장하고 있습니다.
	따라서 별도의 서버 설치가 필요하지 않습니다.

# 실행 환경 : 
	Spring Framework는 애플리케이션을 개발만 할 뿐 배포 및 실행환경은 개발자가 구성해야 합니다.
	Spring Boot는 애플리케이션의 실행환경을 자동으로 구성하여 배포 및 실행이 쉬워집니다.

# 마이크로서비스 아키텍처
	Spring Framework는 마이크로서비스 아키텍처를 구현할 수 있는 기능을 제공하지 않습니다.
	Spring Boot는 스프링 클라우드 프로젝트를 활용하여 마이크로서비스 아키텍처를 구현할 수 있습니다.

# 기본 설정 :
	Spring Boot는 기본 설정을 제공하여 개발자가 별도의 설정을 하지 않아도 쉽게 애플리케이션을 개발할 수 있습니다.

# 개발 생산성 :
	Spring Boot는 개발 생산성을 높이기 위해 다양한 툴과 플러그인을 제공합니다.
	스프링 애플리케이션을 개발하기 위한 기본 세팅이 이미 이루어져 있으므로, 보다 빠르고 쉽게 애플리케이션을 구축할 수 있습니다.

# 요약
	결론적으로, Spring Boot는 Spring을 기반으로 하면서도 더 높은 생산성과 개발자 친화성을 제공하며, 애플리케이션 개발을 더욱 쉽게 만들어줍니다.