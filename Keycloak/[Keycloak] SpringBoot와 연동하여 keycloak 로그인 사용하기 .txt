[ keycloak - 스프링부트와 연동하여 키클락 로그인 사용하기 ] 

https://oingdaddy.tistory.com/196




# pom.xml 에 추가
	spring-boot-starter-security , keycloak-spring-security-adapter 두개의 라이브러리가 필요함
	=================================================================================================================
		<properties>
			<java.version>1.8</java.version>
			<keycloak.version>15.1.1</keycloak.version>
		</properties>


			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
			</dependency>

			<dependency>
				<groupId>org.keycloak</groupId>
				<artifactId>keycloak-spring-security-adapter</artifactId>
				<version>${keycloak.version}</version>
			</dependency>
	=================================================================================================================

# keycloak.json 파일 생성

	=================================================================================================================
	{
	  "realm": "demo",
	  "auth-server-url": "http://localhost:8080/auth",
	  "ssl-required": "external",
	  "resource": "my_client",
	  "credentials": {
		"secret": "qvkQHSyu9o0y6PuwCKcteVw0YrrK52dU"
	  },
	  "confidential-port": 0
	}
	=================================================================================================================


	※ json 파일이 아닌 다른방식(yml 이나 properties 파일을 사용할 경우 아래의 링크 참조
		https://www.programcreek.com/java-api-examples/?api=org.keycloak.adapters.KeycloakDeploymentBuilder

		https://www.programcreek.com/java-api-examples/?code=quarkusio%2Fquarkus%2Fquarkus-master%2Fextensions%2Fkeycloak-authorization%2Fruntime%2Fsrc%2Fmain%2Fjava%2Fio%2Fquarkus%2Fkeycloak%2Fpep%2Fruntime%2FKeycloakPolicyEnforcerAuthorizer.java


# KeycloakSecurityConfig.java 파일 작성

	=================================================================================================================

	package com.sungchul.keycloak.config;

	import org.keycloak.adapters.KeycloakConfigResolver;
	import org.keycloak.adapters.KeycloakDeployment;
	import org.keycloak.adapters.KeycloakDeploymentBuilder;
	import org.keycloak.adapters.spi.HttpFacade;
	import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
	import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
	import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
	import org.keycloak.representations.adapters.config.AdapterConfig;
	import org.keycloak.representations.adapters.config.PolicyEnforcerConfig;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.beans.factory.annotation.Value;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
	import org.springframework.security.config.annotation.web.builders.HttpSecurity;
	import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
	import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
	import org.springframework.security.core.session.SessionRegistryImpl;
	import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
	import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;

	import java.io.InputStream;
	import java.util.HashMap;

	@Configuration
	@EnableWebSecurity
	public class KeycloakSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {

		@Autowired
		public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
			KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
			keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(new SimpleAuthorityMapper());
			auth.authenticationProvider(keycloakAuthenticationProvider);
		}

		@Bean
		@Override
		protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
			return new RegisterSessionAuthenticationStrategy(
					new SessionRegistryImpl());
		}

		@Override
		protected void configure(HttpSecurity http) throws Exception {
			super.configure(http);
			http.authorizeRequests()
					.antMatchers("/api*").permitAll()
					.anyRequest().authenticated();
		}

		@Bean
		public KeycloakConfigResolver keycloakConfigResolver() {
			return new KeycloakConfigResolver() {

				private KeycloakDeployment keycloakDeployment;
				@Override
				public KeycloakDeployment resolve(HttpFacade.Request facade) {
					if (keycloakDeployment != null) {
						return keycloakDeployment;
					}

					InputStream configInputStream = getClass().getResourceAsStream("/keycloak.json");
					return KeycloakDeploymentBuilder.build(configInputStream);
				}
			};
		}
	}

	=================================================================================================================