# Effective Java - 챕터10. equals는 일반 규약을 지켜 재정의 하라 -2
	
	
	- 추이성(transitivity) :
		추이성은 첫 번째 객체와 두 번째 객체가 같고, 두 번째 객체와 세 번째 객체가 같아면, 첫 번째 객체와 세 번째 객체도 같아야 한다는 뜻이다.
		이 요건도 간단하지만 자칫하면 어기기 쉽다.
		상위 클래스에 없는 새로운 필드를 하위 클래스에 추가하는 상황일 경우를 보자


			간단하게 X , Y 좌표를 받아서 2차원 점을 표현하는 클래스		
			================================================================================
			public class Point {
				private final int x;
				private final int y;

				public Point (int x , int y){
					this.x = x;
					this.y = y;
				}

				@Override
				public boolean equals(Object o){
					if(! (o instanceof Point)){
						return false;
					}

					Point p = (Point)o;
					return p.x == x && p.y ==y;
				}
			}
			================================================================================

		이제 위의 클래스를 확장(상속)받아 색상 필드를 추가해보자
			================================================================================
			public class ColorPoint extends Point{
				private final Color color;

				public ColorPoint(int x , int y , Color color){
					super(x,y);
					this.color = color;
				}
			}

			================================================================================
		
		equals 메소드를 재정의 하지 않으면 부모 클래스의  equals 구현이 상속받아져서 색상 정보는 무시한채 비교를 하게된다
		다만 이렇게 된다면 equals 규약은 어긴게 아니지만 중요한 정보를 놓치게 되니까 받아들일수 없는 상황이다.

		다음 코드처럼 비교 대상이 또 다른 ColorPoint 이고 위치와 색상이 같을 때만 true 를 반환하는 equals 를 생각해보자
			
			대칭성이 위배되는 코드	
			================================================================================
			@Override
			public boolean equals(Object o){
				if (!(o instanceof ColorPoint)){
					return false;
				}
				return super.equals(o) && ((ColorPoint) o).color ==color;
			}
			================================================================================

		이 메서드는 일반 Point 를 ColorPoint 에 비교한 결과와 그 둘을 바꿔 비교한 결과가 다를 수 있다.
		Point의 equals 는 색상을 무시하고, ColorPoint  의 equals 는 입력 매개변수의 클래스 종류가 다르다며 매번 false만을 반환한다.
		각각의 인스턴스를 하나씩 만들어서 실제로 동작하는 것을 확인해보자

			================================================================================
			Point p = new Point(1,2);
			ColorPoint cp = new ColorPoint(1,2,Color.RED);
			================================================================================

		p.equals(cp)는 true를 cp.equals(s)는 false를 반환한다.
		이럴경우 ColorPoint.equals에서 Point 를 비교할 때는 색상을 무시하도록 하는경우는 어떻게 되는지 보자
			================================================================================
			@Override
			public boolean equals(Object o){
				if(!(o instanceof Point)){
					return false;
				}
				
				//o 가 일반 Point 면 색상을 무시하고 비교
				if(!(o instanceof ColorPoint)){
					return o.equals(this);
				}
				
				//o 가 ColorPoint 면 색상까지 비교
				return super.equals(o) && ((ColorPoint) o),color ==color;
			}

			================================================================================

		위의 방식은 대칭성은 지켜주지만, 추이성을 깨버린다.
			================================================================================
			ColorPoint p1  new ColorPoint(1,2,Color.RED);
			Point p2 = new Point(1,2);
			ColorPoint p2  new ColorPoint(1,2,Color.BLUE);
			================================================================================

		위의 코드를 비교해보면
		p1.equals(p2) 와 p2.equals(p3)는 true를 반환하는데
		p1.equals(p3) 는 false 를 반환한다.
		p1 과 p2 비교, p2 와 p3의 비교에서는 색상을 무시했지만 p1과 p3의 비교에서는 색상까지 고려하여 비교했기 때문이다.

		또한 이 방식은 무한 루프에 빠질 위험도 있다.
		Point의 또 다른 하위 클래스를 만들고 equals 는 같은 방식으로 구현한뒤 호출하면 StackOverflowError 을 일으킨다.

		객체지향적 추상화의 이점을 포기하지 않는한 구체 클래스를 확장해 새로운 값을 추가하면서 equals 규악을 만족시킬 방법은 존재하지 않는다.
			
			리스코프 치환 원칙 위배
			================================================================================
			@Override public boolean equals(Object o){
				if( o ==null || o.getClass() != getClass()){
					return false;
				}

				Point p = (Point) o;
				return p.x== && p.y ==y;
			}
			================================================================================
		
		위와 같이 구현을 하게되면 같은 구현 클래스의 객체와 비교할 때만 true를 반환한다.
		괜찮아 보이지만 실제로 활용할 수는 없다.
		Point의 하위 클래스는 정의상 여전히 Point 이므로 어디서든 Point 로써 활용될 수 있어야 한다.

		근데 이 방식에서는 그렇지 못한다.

		리스코프 치환 원칙(Liskov substitution principle)에 따르면, 어떤 타입에 있어 중요한 속성이라면 그 하위 타입에서도 마찬가지로 중요하다.
		따라서 그 타입의 모든 메서드가 하위 타입에서도 똑같이 잘 작동해야 한다.

		구체 클래스의 하위 클래스에서 값을 추가할 방법은 없지만 괜찮은 우회 방법이 하나 있다. "상속 대신 컴포지션을 사용하라" 는 조언에 따르면 된다
		Point 를 상속대신 Point를 ColorPoint 의 private 필드로 두고, ColorPoint 와 같은 위치의 일반 Point 를 반환하는 뷰(view) 메소드를 public 으로 추가하는 식이다.

			equals 규약을 지키면서 값 추가
			================================================================================
			public class ColorPoint{
				private final Point point;
				private final Color color;

				public ColorPoint(int x, int y , Color color){
					point = new Point(x,y);
					this.color = Objects.requireNonNull(color);
				}

				//이 ColorPoint 의 Point 뷰를 반환 (컴포지션)
				public Point asPoint(){
					return point;
				}

				
				@Override
				public boolean equals(Object o){
					if(!(o instanceof ColorPoint)){
						return false;
					}

					ColorPoint cp = (ColorPoint)o;
					return cp.point.eqausl(point) && cp.color.equals(color);
				}


			================================================================================

		자바 라이브러리에도 구체 클래스를 확장해 값을 추가한 클래스가 종종 있다.
		한 가지 예로 java.sql.Timestamp 는 java.util.Date 를 확장한 후 nanoseonds 필드를 추가했다.
		그 결과로 Timespamp의 equals 는 대칭성을 위배하여, Date객체와 한 컬렉션에 넣거나 서로 섞어 사용하면 엉뚱하게 동작할 수 있다.
		그래서 Timespamp의 api 설명에는 Date와 섞어 쓸 때의 주의사항을 언급하고 있다.
		둘을 명확히 분리해 사용하는 한 문제될 것은 없지만, 섞이지 않도록 보장 해줄 수단은 없다.
		자칫 실수하면 디버깅 하기 어려운 이상한 오류를 ㅕㅇ험할 수 있으니 주의하자.
		Timestamp를 이렇게 설계한 것은 실수니 절대 따라하면 안된다.

		추상 클래스의 하위 클래스에서라면 equals 규약을 지키면서도 값을 추가할 수 있다.
		"대그 달린 클래스보다는 클래스 계층 구조를 활용하라" 의 조언을 따라는 클래스 계층구조는 아주 중요한 사실이다.
			--해당내용은 챕터 23에 나옴

		
		

	- 일관성(consistency) : 
		두 객체가 같다면 (어느 하나 혹은 두 객체 모두가 수정되지 않는 한) 앞으로도 영원히 같아야 한다는 뜻이다.
		가변 객체는 비교 시점에 따라 서로 다를 수도 혹은 같을 수도 있는 반면, 불변 객체는 한번 다르면 끝까지 달라야 한다.
		클래스를 작성할 때는 불변 클래스로 만드는게 나을지를 심사숙고하자
		불변 클래스로 만들기로 했다면 equals가 한번 같다고 한 객체와는 영원히 같다고 답하고 다르다고 한 객체와는 영원히 다르다고 답하도록 만들어야 한다.

		클래스가 불변이든 가변이든 equals 의 판단에 신뢰할 수 없는 자원이 끼어들게 해서는 안된다.

		이 제약을 어기면 일관성 조건을 만족시키기가 아주 어렵다.

		예컨데 java.net.URL의 equals 는 주어진 URL과 매핑된 호스트의 IP주소를 이용해 비교한다.
		호스트 이름을 IP주소로 바꾸려면 네트워크를 통해야 하는데, 그 결과가 항상 같다고 보장할 수 없다.
		이는 URL의 equals 가 일반 규약을 어기게 하고, 실무에서도 종종 문제를 일으킨다.
		URL의 equals를 이렇게 구현한 것은 커다란 실수였으니 따라하면 안된다.

		하위 호환성이 발목을 잡아 잘못된 동작을 바로잡을 수도 없다.
		이런 문제를 피하려면 equals는 항시 메모리에 존재하는 객체만을 사용한 결정적(deterministic) 계산만 수행해야 한다.

		
	- null아님 : 
		이름처럼 모든 객체가 null과 같지 않아야 한다는 뜻이다.
		의도하지 않음에도 o.equals(null)이 true를 반환하는 상황은 상상하기 어렵지만, 실수로 NullPointerException을 던지는 코드는 흔할 것이다.
		이 일반 규약은 이런 경우도 허용하지 않는다. 수많은 클래스가 다음 코드처럼 입력이 null 인지를 확인해 자신을 보호한다

			================================================================================
			@Override
			public boolean equals(Object o){
				if(o==null){
					return false;
				}

			}
			================================================================================

		이러한 검사는 필요치 않다. 동치성 검사하려면 equals 는 건네받은 객체를 적절히 형변환한 후 필수 필드들의 값을 알아내야 한다.
		그러려면 형변환에 앞서 instanceof 연산자로 입력 매개변수가 올바른 타입인지 검사해야 한다.
			
			묵시적 null 검사
			================================================================================
			@Override
			public boolean equals(Object o){
				if(!(o instanceof MyType)){
					return false;
				}
				MyType mt = (MyType)o;

			}

			================================================================================
		
		equals가 타입을 확인하지 않으면 잘못된 타입이 인수로 주어졌을 때 ClassCastException을 던져서 일반 규약을 위배하게 된댜.
		그런데 instanceof 는 첫 번째 피연산자가 null 이면 false를 반환한다.
		따라서 입력이 null 이면 타입 확인 단계에서 false를 반환하기 때문에 null 검사를 명시적으로 하지 않아도 된다.

