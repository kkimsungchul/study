# Effective Java - 챕터11. equals를 재정의 하려거든 HashCode도 재정의 하라 - 1
	equals를 재정의한 클래스 모두에서 hashCode 도 재정의해야 한다.
	그렇지 않으면 hashCode 일반 규약을 어기게 되어 해당 클래스의 인스턴스를 HashMap 이나 HashSet 같은 컬렉션의 원소로 사용할 떄 문제를 일으킬 것이다.

	아래의 내용은 Object 명세에 있는 규약이다.
	================================================================================
	- equals 비교에 사용되는 정보가 변경되지 않았다면, 애플리케이션이 실행되는 동안 그 객체의 hashCode메소드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.
	단 애플리케이션을 다시 실행한다면 이 값이 달라져도 상관 없다.

	- equals(Object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.

	- equals(Object)가 두 객체를 다르다고 판단했더라도, 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없다. 
	단, 다른 객체에 대해서는 다른 값을 반환해야 해시테이블의 성능이 좋아진다.
	================================================================================

	
	HashCode 재정의를 잘못했을 때 크게 문제가 되는 조항은 두번째 조항이다.
	논리적으로 같은 객체는 같은 해시코드를 반환해야 한다.
	equals는 물리적으로 다른 두 객체를 논리적으로는 같다고 할 수 있다.
	하지만 Object의 기본 hashCode 메소드는 이 둘이 전혀 다르다고 판단하여, 규약과 달리 서로 다른 값을 반환한다.

	
	================================================================================
	Map<PhoneNumber , String> map = new HashMAp<>();
	map.put(new PhoneNumber(707,867,5309), "처리");

	map.get(new PhoneNumber(707,867,5309));
	================================================================================

	위 코드를 실행하면 "처리"가 나와야 할 것 같지만 실제로는 null을 반환한다
	여기에는 2개의 PhoneNumber인스턴스가 사용되었다.
	하나는 HashMap에 "제니"를 넣을때 사용 됐고(논리적 동치인)
	두번째는 이를 꺼내려할 때 사용됐다.
	PhoneNumber 클래스는 hashCode를 재정의 하지 않았기 때문에 논리적 동치인 두 객체가 서로 다른 해시코드를 반환하여 두 번째 규약을 지키지 못한다.
	그 결과 get  메소드는 엉뚱한 해시 버킷에 가서 객체를 찾으려 한 것이다.
	설사 두 인스턴스를 같은 버킷에 담았더라도 get 메소드는 여전히 null 을 반환하는데, HashMap,은 해시코드가 다른 엔트리끼리는 동치성 비교를 시도조차 하지 않도록 최적화가 되어있기 때문이다.

	이 문제는 PhoneNumber에 적절한 hashCode 메소드만 작성해주면 해결된다.

# hashCode 작성 요령
	
	================================================================================
	@Override
	public int hashCode(){
		return 42
	}
	================================================================================
	
	이 코드는 모든 동치인 코드 객체에 똑같은 해시 코드를 반환하니 적법하다.
	하지만 모든 객체에 똑같은 값만 내어주므로 모든 객체가 해시테이블의 버킷 하나에 담겨 마치 연결리스트(linked list)처럼 동작한다.
	그 결과 평균 수행시간이 O(1)인 해시테이블이 O(n) 으로 느려져서, 객체가 많아지면 도저히 쓸 수 없게 된다.

	좋은 해시함수라면 서로 다른 인스턴스에 다른 해시코드를 반환한다.
	이것이 바로 hashCode의 세 번째 규약이 요구하는 속성이다.

	이상적인 해ㅅ 함수는 주어진 인스턴스들을 32 비트 정수 범위에 균일하게 분배해야 한다.
	이상을 완벽히 실현하기는 어렵지만 비슷하게 만들기는 그다지 어렵지 않다.

	아래는 HashCode를 작성하는 간단한 요령이다.

		1. int 변수 result를 선언한 후 값 c로 초기화 한다.
			이때 c는 해당 객체의 첫번째 핵심 필드를 단계 2-1. 방식으로 계산한 해시코드다
			(여기서 핵심 필드란 equals 비교에서 사용되는 필드를 말한다)
		
		2. 해당 객체의 나머지 핵심 필드 f 각각에 대해 다음 작업을 수행한다.
			2-1. 해당 필드의 해시코드 c 를 계산한다.
				2-1-1. 기본 타입 필드라면, Type.hashCode(f) 를 수행한다.
					여기서 Type은 해당 기본 타입의 박싱 클래스다.

				2-1-2. 참조 타입 필드면서 이 클래스의 equals 메소드가 이 필드의 equals를 재귀적으로 호출해 비교한다면,
					이 필드의 hashCode를 재귀적으로 호출한다.
					계산이 더 복잡해질 것 같으면, 이 필드의 표준형(ca-nonical representation)을 만들어 그 표준형의 hashCode를 호출한다.
					필드의 값이 null이면 0을 사용한다. (다른 상수도 괜찮지만 전통적으로 0을 사용한다.
				
				2-1-3. 필드가 배열이라면, 핵심 원소 각각을 별도의 필드처럼 다룬다.
					이상의 규칙을 재귀적으로 적용해 각 핵심 원소의 해시코드를 계산한음 단계 2-2. 방식으로 갱신한다.
					배열에 핵심 원소가 하나도 없다면 단순히 상수(0을 추천)를 사용한다.
					모든 원소가 핵심 원소라면 Arrays.hashCode를 사용한다.
			
			2-2. 단계 2-1. 에서 계산한 해시코드 c로 result를 갱신한다.
				코드는 아래와 같다
				================================================================================
				result = 31 * result + c;
				================================================================================
			
		3. result 를 반환한다.

	
	hashCode를 작성할때 파생 필드는 해시코드 계산에서 제외해도 된다. 즉, 다른 필드로부터 계산해 낼 수 있는 필드는 모두 무시해도 된다.
	또한 equals 비교에 사용되지 않는 필드는 '반드시' 제외해야 한다.
	그렇지 않으면 hashCode의 규약 두 번째를 어기게 될 위험이 있다.

	2-2. 단계에서 * 31을 하는 이유는 필드를 곱하는 순서에 따라 result 값이 달라지게 한다.
	그 결과 클래스에 비슷한 필드가 여러 개일 때 해시 효과를 크게 높여준다.
	예컨대 String의 hashCode를 곱셉 없이 구현한다면 모든 아나그램(anagram, 구성하는 철자가 같고 그 순서만 다른 문자열)의 해시코드가 같아진다.

	곱하는 숫자가 31인 이유는 31이 홀수이면서 소수(prime)이기 때문이다.
	만약 이 숫자가 짝수이고 오버플로가 발생한다면 정보를 잃게 된다.
	2를 곱하는 것은 시프트 연산과 같은 결과를 내기 때문이다.
	소수를 곱하는 이유는 명확하지만 전통적으로 그리 해왔다.
	결과적으로 31을 이용하면 이 곱셈을 시프트 연산과 뺄셈으로 대체해 최적화 할 수 있다.	(31 * i 는 (i<<5)-i 와 같다) 
	요즘 VM들은 이런 최적화를 자동으로 해준다.
