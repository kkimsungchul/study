# Redis - Redis에서 CRUD 하기

# 참고링크
	https://computerlove.tistory.com/entry/REDIS-SETNX-SETEX-MEST-MSETNX

# 아래 문서 참고사항
	key 라고 명시된 값은 key값
	value 명시된 값은 value값

# 데이터 저장
	set key value
	=====================================================================
	set log_data_1 "data123123"
	=====================================================================
	
	=====================================================================
	set trace_id_12345 "{\"status\": \"complete\",\"parsing_data_log\" : [\" parsing_log_data1111111111\"],\"parsing_data_trace\" : [\" parsing_trace_data1111111111\"],\"retry\": 2,\"api\" : N}"
	=====================================================================


# 데이터 가져오기
	get key
	=====================================================================
	get log_data_1
	=====================================================================

	=====================================================================
	localhost:16379> get trace_id_12345
	"{\"status\": \"complete\",\"parsing_data_log\" : [\" parsing_log_data1111111111\"],\"parsing_data_trace\" : [\" parsing_trace_data1111111111\"],\"retry\": 2,\"api\" : N}"
	=====================================================================

# 키값 변경
	rename key "newKey"
	=====================================================================
	rename log_data_1 "log_data_2"
	=====================================================================
	
	변경 확인
	=====================================================================
	localhost:16379> get log_data_1
	(nil)
	localhost:16379> get log_data_2
	"data123123"
	=====================================================================

# 모든 키 검색
	keys 패턴
	- 모든 키 검색
	=====================================================================
	localhost:16379> keys *
	1) "log_data_2"
	2) "trace_data_1"
	=====================================================================
	
	- log_로 시작하는 키 검색
	=====================================================================
	localhost:16379> keys log_*
	1) "log_data_2"
	=====================================================================

# 키 존재 확인
	exists key
	- 1 존재 , 0 미존재
	=====================================================================
	localhost:16379> exists log_data_2
	(integer) 1
	localhost:16379> exists log_data_3
	(integer) 0
	=====================================================================

# 모든 키 삭제
	flushall
	=====================================================================
	localhost:16379> flushall
	OK
	localhost:16379> keys *
	(empty list or set)
	=====================================================================

# 데이터 일정 시간 키 삭제 (데이터 만료시간 설정)
	setex key second value  
	※ 위명령어는 deprecated 될 예정
	setex 저장할키 삭제할시간 저장할값
	=====================================================================
	setex log_data_5 5 "data123123"
	=====================================================================

	set key value EX second
	set 저장할키 저장할값 EX 삭제할시간
	=====================================================================
	set log_data_6 "data123123" EX 5
	=====================================================================

# 삭제되기까지 남은 시간 확인
	ttl key
	=====================================================================
	ttl log_data_5
	=====================================================================

# 여러개 키 저장
	mset key value key value key value 
	※ 계속 늘려서 사용 가능
	=====================================================================
	mset trace_data_1 "trace1" trace_data_2 "trace2" trace_data_3 "trace3"
	=====================================================================
	값 확인
	=====================================================================
	get trace_data_1
	get trace_data_2
	get trace_data_3
	=====================================================================
		
	=====================================================================
	localhost:16379> mset trace_data_1 "trace1" trace_data_2 "trace2" trace_data_3 "trace3"
	OK
	localhost:16379> get trace_data_1
	"trace1"
	localhost:16379> get trace_data_2
	"trace2"
	localhost:16379> get trace_data_3
	"trace3"
	=====================================================================

# 여러개 키 조회
	mget key key key 
	※ 계속 늘려서 사용 가능
	=====================================================================
	mget trace_data_1 trace_data_2 trace_data_3
	=====================================================================
	
	=====================================================================
	localhost:16379> mget trace_data_1 trace_data_2 trace_data_3
	1) "trace1"
	2) "trace2"
	3) "trace3"
	=====================================================================

# value 에 값 추가
	- key가 이미 존재한다면 append 명령어는 기존 value값 뒤에 추가됨
	- key가 존재하지 않거나 빈 문자열이면 set 명령어와 똑같이 작동함

	append key value
	=====================================================================
	localhost:16379> set trace_data_4 "trace4"
	OK
	localhost:16379> get trace_data_4
	"trace4"
	localhost:16379> append trace_data_4 " word"
	(integer) 11
	localhost:16379> get trace_data_4
	"trace4 word"
	=====================================================================

# 특정 key값의 value값에 대한 증가/감소 값을 가져올때 
	incr : 1증가
	decr : 1감소
	incrby : 지정값 증가
	decrby : 지정값 감소
	=====================================================================
	localhost:16379> set data_1 1000
	OK
	localhost:16379> incr data_1
	(integer) 1001
	localhost:16379> get data_1
	"1001"
	=====================================================================

	decr
	=====================================================================
	localhost:16379> set data_2 1000
	OK
	localhost:16379> decr data_2
	(integer) 999
	localhost:16379> get data_2
	"999"
	=====================================================================

	incrby
	=====================================================================
	localhost:16379> set data_3 1000
	OK
	localhost:16379> incrby data_3 100
	(integer) 1100
	localhost:16379> get data_3
	"1100"
	=====================================================================
	
	decrby
	=====================================================================
	localhost:16379> set data_4 1000
	OK
	localhost:16379> decrby data_4 100
	(integer) 900
	localhost:16379> get data_4
	"900"
	=====================================================================

# 덤프 파일 저장
	아래의 명령어를 치면 Redis폴더의 dump.rdb 파일로 저장됨
	save


